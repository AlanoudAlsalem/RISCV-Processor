$date
	Sun Jan 12 00:52:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module microTestbench $end
$var wire 1 ! zeroFlag $end
$var wire 32 " writeBackData [31:0] $end
$var wire 2 # state [1:0] $end
$var wire 32 $ signExtenderOutputData [31:0] $end
$var wire 32 % selectedPC [31:0] $end
$var wire 32 & selectedOp2 [31:0] $end
$var wire 1 ' sb_ID_EX_out $end
$var wire 1 ( sb_EX_MEM_out $end
$var wire 1 ) sb $end
$var wire 5 * rs2_ID_EX_out [4:0] $end
$var wire 5 + rs1_ID_EX_out [4:0] $end
$var wire 1 , regWrite_MEM_WB_out $end
$var wire 1 - regWrite_ID_EX_out $end
$var wire 1 . regWrite_EX_MEM_out $end
$var wire 1 / regWrite $end
$var wire 32 0 readData2_ID_EX_out [31:0] $end
$var wire 32 1 readData2_EX_MEM_out [31:0] $end
$var wire 32 2 readData2 [31:0] $end
$var wire 32 3 readData1_ID_EX_out [31:0] $end
$var wire 32 4 readData1 [31:0] $end
$var wire 32 5 readAddress [31:0] $end
$var wire 5 6 rd_MEM_WB_out [4:0] $end
$var wire 5 7 rd_ID_EX_out [4:0] $end
$var wire 5 8 rd_EX_MEM_out [4:0] $end
$var wire 32 9 r9 [31:0] $end
$var wire 32 : r8 [31:0] $end
$var wire 32 ; r7 [31:0] $end
$var wire 32 < r6 [31:0] $end
$var wire 32 = r5 [31:0] $end
$var wire 32 > r4 [31:0] $end
$var wire 32 ? r32 [31:0] $end
$var wire 32 @ r31 [31:0] $end
$var wire 32 A r30 [31:0] $end
$var wire 32 B r3 [31:0] $end
$var wire 32 C r29 [31:0] $end
$var wire 32 D r28 [31:0] $end
$var wire 32 E r27 [31:0] $end
$var wire 32 F r26 [31:0] $end
$var wire 32 G r25 [31:0] $end
$var wire 32 H r24 [31:0] $end
$var wire 32 I r23 [31:0] $end
$var wire 32 J r22 [31:0] $end
$var wire 32 K r21 [31:0] $end
$var wire 32 L r20 [31:0] $end
$var wire 32 M r2 [31:0] $end
$var wire 32 N r19 [31:0] $end
$var wire 32 O r18 [31:0] $end
$var wire 32 P r17 [31:0] $end
$var wire 32 Q r16 [31:0] $end
$var wire 32 R r15 [31:0] $end
$var wire 32 S r14 [31:0] $end
$var wire 32 T r13 [31:0] $end
$var wire 32 U r12 [31:0] $end
$var wire 32 V r11 [31:0] $end
$var wire 32 W r10 [31:0] $end
$var wire 32 X r1 [31:0] $end
$var wire 1 Y predicted $end
$var wire 32 Z pcPlus4 [31:0] $end
$var wire 32 [ pcBranched [31:0] $end
$var wire 32 \ pcBranchOperand [31:0] $end
$var wire 1 ] nop $end
$var wire 1 ^ memtoReg_MEM_WB_out $end
$var wire 1 _ memtoReg_ID_EX_out $end
$var wire 1 ` memtoReg_EX_MEM_out $end
$var wire 1 a memtoReg $end
$var wire 1 b memWrite_ID_EX_out $end
$var wire 1 c memWrite_EX_MEM_out $end
$var wire 1 d memWrite $end
$var wire 32 e m8 [31:0] $end
$var wire 32 f m4 [31:0] $end
$var wire 32 g m36 [31:0] $end
$var wire 32 h m32 [31:0] $end
$var wire 32 i m28 [31:0] $end
$var wire 32 j m24 [31:0] $end
$var wire 32 k m20 [31:0] $end
$var wire 32 l m16 [31:0] $end
$var wire 32 m m12 [31:0] $end
$var wire 32 n m0 [31:0] $end
$var wire 1 o lh_MEM_WB_out $end
$var wire 1 p lh_ID_EX_out $end
$var wire 1 q lh_EX_MEM_out $end
$var wire 1 r lh $end
$var wire 1 s ld_ID_EX_out $end
$var wire 1 t ld_EX_MEM_out $end
$var wire 1 u ld $end
$var wire 1 v jalr $end
$var wire 32 w instruction_IF_ID_out [31:0] $end
$var wire 32 x instruction [31:0] $end
$var wire 32 y immediate_ID_EX_out [31:0] $end
$var wire 32 z immediate [31:0] $end
$var wire 1 { halt_MEM_WB_out $end
$var wire 1 | halt_ID_EX_out $end
$var wire 1 } halt_EX_MEM_out $end
$var wire 1 ~ halt $end
$var wire 32 !" forwardedOp2 [31:0] $end
$var wire 32 "" forwardedOp1 [31:0] $end
$var wire 2 #" forwardOp2 [1:0] $end
$var wire 2 $" forwardOp1 [1:0] $end
$var wire 32 %" data_MEM_WB_out [31:0] $end
$var wire 32 &" data [31:0] $end
$var wire 32 '" branchUnitOperand2 [31:0] $end
$var wire 32 (" branchUnitOperand1 [31:0] $end
$var wire 1 )" PCsrc $end
$var wire 32 *" PC_IF_ID_out [31:0] $end
$var wire 32 +" PC_ID_EX_out [31:0] $end
$var wire 2 ," ID_forwardOp2 [1:0] $end
$var wire 2 -" ID_forwardOp1 [1:0] $end
$var wire 2 ." ALUsrc_ID_EX_out [1:0] $end
$var wire 2 /" ALUsrc [1:0] $end
$var wire 32 0" ALUresult_MEM_WB_out [31:0] $end
$var wire 32 1" ALUresult_EX_MEM_out [31:0] $end
$var wire 32 2" ALUresult [31:0] $end
$var wire 4 3" ALUop_ID_EX_out [3:0] $end
$var wire 4 4" ALUop [3:0] $end
$var reg 1 5" clock $end
$var reg 1 6" reset $end
$var integer 32 7" cycles [31:0] $end
$scope module ALUDUT $end
$var wire 4 8" operation [3:0] $end
$var wire 32 9" operand2 [31:0] $end
$var wire 32 :" operand1 [31:0] $end
$var parameter 4 ;" addop $end
$var parameter 4 <" andop $end
$var parameter 4 =" jalop $end
$var parameter 4 >" luiop $end
$var parameter 4 ?" orop $end
$var parameter 4 @" sllop $end
$var parameter 4 A" sltop $end
$var parameter 4 B" srlop $end
$var parameter 4 C" subop $end
$var parameter 4 D" xorop $end
$var reg 32 E" result [31:0] $end
$var reg 1 ! zeroFlag $end
$upscope $end
$scope module add4Adder $end
$var wire 32 F" operand2 [31:0] $end
$var wire 32 G" sum [31:0] $end
$var wire 32 H" operand1 [31:0] $end
$upscope $end
$scope module branchAdder $end
$var wire 32 I" operand1 [31:0] $end
$var wire 32 J" sum [31:0] $end
$var wire 32 K" operand2 [31:0] $end
$upscope $end
$scope module branchUnit $end
$var wire 1 5" clock $end
$var wire 3 L" funct3 [2:0] $end
$var wire 7 M" opCode [6:0] $end
$var wire 1 6" reset $end
$var wire 32 N" operand2 [31:0] $end
$var wire 32 O" operand1 [31:0] $end
$var wire 1 ] nop $end
$var parameter 7 P" bOp $end
$var parameter 3 Q" beqf3 $end
$var parameter 3 R" bnef3 $end
$var parameter 7 S" jalOp $end
$var parameter 7 T" jalrOp $end
$var reg 1 )" PCsrc $end
$var reg 1 Y predicted $end
$var reg 2 U" state [1:0] $end
$upscope $end
$scope module branchUnitOp1Mux $end
$var wire 32 V" i3 [31:0] $end
$var wire 2 W" select [1:0] $end
$var wire 32 X" i2 [31:0] $end
$var wire 32 Y" i1 [31:0] $end
$var wire 32 Z" i0 [31:0] $end
$var reg 32 [" out [31:0] $end
$upscope $end
$scope module branchUnitOp2Mux $end
$var wire 32 \" i3 [31:0] $end
$var wire 2 ]" select [1:0] $end
$var wire 32 ^" i2 [31:0] $end
$var wire 32 _" i1 [31:0] $end
$var wire 32 `" i0 [31:0] $end
$var reg 32 a" out [31:0] $end
$upscope $end
$scope module bufferEX_MEM $end
$var wire 32 b" ALUresult_in [31:0] $end
$var wire 1 5" clock $end
$var wire 1 6" reset $end
$var wire 1 ' sb_in $end
$var wire 1 - regWrite_in $end
$var wire 32 c" readData2_in [31:0] $end
$var wire 5 d" rd_in [4:0] $end
$var wire 1 _ memtoReg_in $end
$var wire 1 b memWrite_in $end
$var wire 1 p lh_in $end
$var wire 1 s ld_in $end
$var wire 1 | halt_in $end
$var reg 32 e" ALUresult [31:0] $end
$var reg 1 } halt $end
$var reg 1 t ld $end
$var reg 1 q lh $end
$var reg 1 c memWrite $end
$var reg 1 ` memtoReg $end
$var reg 5 f" rd [4:0] $end
$var reg 32 g" readData2 [31:0] $end
$var reg 1 . regWrite $end
$var reg 1 ( sb $end
$upscope $end
$scope module bufferID_EX $end
$var wire 1 5" clock $end
$var wire 5 h" rd_in [4:0] $end
$var wire 1 6" reset $end
$var wire 5 i" rs1_in [4:0] $end
$var wire 5 j" rs2_in [4:0] $end
$var wire 1 ) sb_in $end
$var wire 1 / regWrite_in $end
$var wire 32 k" readData2_in [31:0] $end
$var wire 32 l" readData1_in [31:0] $end
$var wire 1 ] nop $end
$var wire 1 a memtoReg_in $end
$var wire 1 d memWrite_in $end
$var wire 1 r lh_in $end
$var wire 1 u ld_in $end
$var wire 32 m" immediate_in [31:0] $end
$var wire 1 ~ halt_in $end
$var wire 32 n" PC_in [31:0] $end
$var wire 2 o" ALUsrc_in [1:0] $end
$var wire 4 p" ALUop_in [3:0] $end
$var reg 4 q" ALUop [3:0] $end
$var reg 2 r" ALUsrc [1:0] $end
$var reg 32 s" PC [31:0] $end
$var reg 1 | halt $end
$var reg 32 t" immediate [31:0] $end
$var reg 1 s ld $end
$var reg 1 p lh $end
$var reg 1 b memWrite $end
$var reg 1 _ memtoReg $end
$var reg 5 u" rd [4:0] $end
$var reg 32 v" readData1 [31:0] $end
$var reg 32 w" readData2 [31:0] $end
$var reg 1 - regWrite $end
$var reg 5 x" rs1 [4:0] $end
$var reg 5 y" rs2 [4:0] $end
$var reg 1 ' sb $end
$upscope $end
$scope module bufferIF_ID $end
$var wire 1 5" clock $end
$var wire 1 6" reset $end
$var wire 32 z" instruction_in [31:0] $end
$var wire 32 {" PC_in [31:0] $end
$var reg 32 |" PC [31:0] $end
$var reg 32 }" instruction [31:0] $end
$upscope $end
$scope module bufferMEM_WB $end
$var wire 32 ~" ALUresult_in [31:0] $end
$var wire 1 5" clock $end
$var wire 1 } halt_in $end
$var wire 1 q lh_in $end
$var wire 1 ` memtoReg_in $end
$var wire 5 !# rd_in [4:0] $end
$var wire 1 . regWrite_in $end
$var wire 1 6" reset $end
$var wire 32 "# data_in [31:0] $end
$var reg 32 ## ALUresult [31:0] $end
$var reg 32 $# data [31:0] $end
$var reg 1 { halt $end
$var reg 1 o lh $end
$var reg 1 ^ memtoReg $end
$var reg 5 %# rd [4:0] $end
$var reg 1 , regWrite $end
$upscope $end
$scope module controlUnit $end
$var wire 3 &# funct3 [2:0] $end
$var wire 7 '# funct7 [6:0] $end
$var wire 7 (# opCode [6:0] $end
$var wire 1 ] nop $end
$var wire 1 ~ halt $end
$var parameter 7 )# Rtype $end
$var parameter 7 *# addiwOp $end
$var parameter 3 +# addiwf3 $end
$var parameter 4 ,# addop $end
$var parameter 3 -# addwf3 $end
$var parameter 7 .# addwf7 $end
$var parameter 3 /# andf3 $end
$var parameter 7 0# andf7 $end
$var parameter 7 1# andiOp $end
$var parameter 3 2# andif3 $end
$var parameter 4 3# andop $end
$var parameter 7 4# beqOp $end
$var parameter 3 5# beqf3 $end
$var parameter 7 6# bneOp $end
$var parameter 3 7# bnef3 $end
$var parameter 7 8# jalOp $end
$var parameter 4 9# jalop $end
$var parameter 7 :# jalrOp $end
$var parameter 3 ;# jalrf3 $end
$var parameter 7 <# lhOp $end
$var parameter 3 =# lhf3 $end
$var parameter 7 ># luiOp $end
$var parameter 4 ?# luiop $end
$var parameter 7 @# lwOp $end
$var parameter 3 A# lwf3 $end
$var parameter 3 B# orf3 $end
$var parameter 7 C# orf7 $end
$var parameter 7 D# oriOp $end
$var parameter 3 E# orif3 $end
$var parameter 4 F# orop $end
$var parameter 7 G# sbOp $end
$var parameter 3 H# sbf3 $end
$var parameter 3 I# sllf3 $end
$var parameter 7 J# sllf7 $end
$var parameter 4 K# sllop $end
$var parameter 3 L# sltf3 $end
$var parameter 7 M# sltf7 $end
$var parameter 4 N# sltop $end
$var parameter 3 O# srlf3 $end
$var parameter 7 P# srlf7 $end
$var parameter 4 Q# srlop $end
$var parameter 3 R# subf3 $end
$var parameter 7 S# subf7 $end
$var parameter 4 T# subop $end
$var parameter 7 U# swOp $end
$var parameter 3 V# swf3 $end
$var parameter 3 W# xorf3 $end
$var parameter 7 X# xorf7 $end
$var parameter 4 Y# xorop $end
$var reg 4 Z# ALUop [3:0] $end
$var reg 2 [# ALUsrc [1:0] $end
$var reg 1 v jalr $end
$var reg 1 u ld $end
$var reg 1 r lh $end
$var reg 1 d memWrite $end
$var reg 1 a memtoReg $end
$var reg 1 / regWrite $end
$var reg 1 ) sb $end
$upscope $end
$scope module dataMem $end
$var wire 32 \# dataAddress [31:0] $end
$var wire 1 c memWrite $end
$var wire 1 ( sb $end
$var wire 32 ]# writeData [31:0] $end
$var wire 32 ^# m8 [31:0] $end
$var wire 32 _# m4 [31:0] $end
$var wire 32 `# m36 [31:0] $end
$var wire 32 a# m32 [31:0] $end
$var wire 32 b# m28 [31:0] $end
$var wire 32 c# m24 [31:0] $end
$var wire 32 d# m20 [31:0] $end
$var wire 32 e# m16 [31:0] $end
$var wire 32 f# m12 [31:0] $end
$var wire 32 g# m0 [31:0] $end
$var wire 32 h# data [31:0] $end
$upscope $end
$scope module forwardALUOp1 $end
$var wire 32 i# i0 [31:0] $end
$var wire 32 j# i1 [31:0] $end
$var wire 32 k# i3 [31:0] $end
$var wire 2 l# select [1:0] $end
$var wire 32 m# i2 [31:0] $end
$var reg 32 n# out [31:0] $end
$upscope $end
$scope module forwardALUOp2 $end
$var wire 32 o# i0 [31:0] $end
$var wire 32 p# i1 [31:0] $end
$var wire 32 q# i3 [31:0] $end
$var wire 2 r# select [1:0] $end
$var wire 32 s# i2 [31:0] $end
$var reg 32 t# out [31:0] $end
$upscope $end
$scope module fwUnit $end
$var wire 5 u# EX_MEM_rd [4:0] $end
$var wire 5 v# ID_EX_rd [4:0] $end
$var wire 5 w# ID_EX_rs1 [4:0] $end
$var wire 5 x# ID_EX_rs2 [4:0] $end
$var wire 5 y# IF_ID_rs1 [4:0] $end
$var wire 5 z# IF_ID_rs2 [4:0] $end
$var wire 5 {# MEM_WB_rd [4:0] $end
$var wire 2 |# branch [1:0] $end
$var wire 1 5" clock $end
$var wire 1 }# load_EX_MEM $end
$var wire 1 s load_ID_EX $end
$var wire 7 ~# opCode [6:0] $end
$var wire 1 . regWrite_EX_MEM $end
$var wire 1 - regWrite_ID_EX $end
$var wire 1 , regWrite_MEM_WB $end
$var wire 1 6" reset $end
$var parameter 7 !$ bOp $end
$var parameter 7 "$ jalrOp $end
$var reg 2 #$ ID_forwardOp1 [1:0] $end
$var reg 2 $$ ID_forwardOp2 [1:0] $end
$var reg 2 %$ forwardOp1 [1:0] $end
$var reg 2 &$ forwardOp2 [1:0] $end
$var reg 1 ] nop $end
$upscope $end
$scope module immediateGen $end
$var wire 32 '$ instruction [31:0] $end
$var parameter 7 ($ addiwOp $end
$var parameter 7 )$ andiOp $end
$var parameter 7 *$ beqOp $end
$var parameter 7 +$ bneOp $end
$var parameter 7 ,$ jalOp $end
$var parameter 7 -$ jalrOp $end
$var parameter 7 .$ lhOp $end
$var parameter 7 /$ luiOp $end
$var parameter 7 0$ lwOp $end
$var parameter 7 1$ oriOp $end
$var parameter 7 2$ sbOp $end
$var parameter 7 3$ swOp $end
$var reg 32 4$ out [31:0] $end
$upscope $end
$scope module instMem $end
$var wire 32 5$ instructionAddress [31:0] $end
$var wire 32 6$ instruction [31:0] $end
$upscope $end
$scope module memtoRegMux $end
$var wire 32 7$ i1 [31:0] $end
$var wire 1 ^ select $end
$var wire 32 8$ i0 [31:0] $end
$var reg 32 9$ out [31:0] $end
$upscope $end
$scope module pcBranchAdderMux $end
$var wire 32 :$ i0 [31:0] $end
$var wire 1 v select $end
$var wire 32 ;$ i1 [31:0] $end
$var reg 32 <$ out [31:0] $end
$upscope $end
$scope module pcMux $end
$var wire 32 =$ i0 [31:0] $end
$var wire 32 >$ i1 [31:0] $end
$var wire 1 )" select $end
$var reg 32 ?$ out [31:0] $end
$upscope $end
$scope module programCounter $end
$var wire 1 )" branch $end
$var wire 1 5" clock $end
$var wire 32 @$ immediate [31:0] $end
$var wire 32 A$ nextAddress [31:0] $end
$var wire 1 ] nop $end
$var wire 1 6" reset $end
$var reg 32 B$ readAddress [31:0] $end
$upscope $end
$scope module registerFile $end
$var wire 1 5" clock $end
$var wire 32 C$ r1 [31:0] $end
$var wire 32 D$ r10 [31:0] $end
$var wire 32 E$ r11 [31:0] $end
$var wire 32 F$ r12 [31:0] $end
$var wire 32 G$ r13 [31:0] $end
$var wire 32 H$ r14 [31:0] $end
$var wire 32 I$ r15 [31:0] $end
$var wire 32 J$ r16 [31:0] $end
$var wire 32 K$ r17 [31:0] $end
$var wire 32 L$ r18 [31:0] $end
$var wire 32 M$ r19 [31:0] $end
$var wire 32 N$ r2 [31:0] $end
$var wire 32 O$ r20 [31:0] $end
$var wire 32 P$ r21 [31:0] $end
$var wire 32 Q$ r22 [31:0] $end
$var wire 32 R$ r23 [31:0] $end
$var wire 32 S$ r24 [31:0] $end
$var wire 32 T$ r25 [31:0] $end
$var wire 32 U$ r26 [31:0] $end
$var wire 32 V$ r27 [31:0] $end
$var wire 32 W$ r28 [31:0] $end
$var wire 32 X$ r29 [31:0] $end
$var wire 32 Y$ r3 [31:0] $end
$var wire 32 Z$ r30 [31:0] $end
$var wire 32 [$ r31 [31:0] $end
$var wire 32 \$ r32 [31:0] $end
$var wire 32 ]$ r4 [31:0] $end
$var wire 32 ^$ r5 [31:0] $end
$var wire 32 _$ r6 [31:0] $end
$var wire 32 `$ r7 [31:0] $end
$var wire 32 a$ r8 [31:0] $end
$var wire 32 b$ r9 [31:0] $end
$var wire 32 c$ readData1 [31:0] $end
$var wire 32 d$ readData2 [31:0] $end
$var wire 5 e$ readReg1 [4:0] $end
$var wire 5 f$ readReg2 [4:0] $end
$var wire 1 , regWrite $end
$var wire 1 6" reset $end
$var wire 32 g$ writeData [31:0] $end
$var wire 5 h$ writeReg [4:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 i$ i [31:0] $end
$upscope $end
$upscope $end
$scope module selectALUOp2 $end
$var wire 32 j$ i0 [31:0] $end
$var wire 32 k$ i1 [31:0] $end
$var wire 32 l$ i2 [31:0] $end
$var wire 32 m$ i3 [31:0] $end
$var wire 2 n$ select [1:0] $end
$var reg 32 o$ out [31:0] $end
$upscope $end
$scope module signExtenderDUT $end
$var wire 32 p$ inputData [31:0] $end
$var wire 1 o lh $end
$var wire 32 q$ outputData [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 3$
b100011 2$
b10011 1$
b11 0$
b111000 /$
b11 .$
b1100111 -$
b1101111 ,$
b1100011 +$
b1100011 *$
b11011 )$
b10011 ($
b1100111 "$
b1100011 !$
b111 Y#
b0 X#
b11 W#
b10 V#
b100011 U#
b10 T#
b0 S#
b110 R#
b110 Q#
b0 P#
b10 O#
b1000 N#
b0 M#
b0 L#
b101 K#
b0 J#
b100 I#
b0 H#
b100011 G#
b100 F#
b111 E#
b10011 D#
b0 C#
b101 B#
b0 A#
b11 @#
b1010 ?#
b111000 >#
b10 =#
b11 <#
b0 ;#
b1100111 :#
b1001 9#
b1101111 8#
b1 7#
b1100011 6#
b0 5#
b1100011 4#
b11 3#
b110 2#
b11011 1#
b0 0#
b111 /#
b100000 .#
b1 -#
b1 ,#
b0 +#
b10011 *#
b110011 )#
b1100111 T"
b1101111 S"
b1 R"
b0 Q"
b1100011 P"
b111 D"
b10 C"
b110 B"
b1000 A"
b101 @"
b100 ?"
b1010 >"
b1001 ="
b11 <"
b1 ;"
$end
#0
$dumpvars
bx q$
bx p$
bx o$
bx n$
bz m$
bx l$
bx k$
bx j$
bx i$
bx h$
bx g$
bx f$
bx e$
bx d$
bx c$
bx b$
bx a$
bx `$
bx _$
bx ^$
bx ]$
bx \$
bx [$
bx Z$
bx Y$
bx X$
bx W$
bx V$
bx U$
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
bx H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx '$
b0 &$
b0 %$
b0 $$
b0 #$
bx ~#
z}#
bz |#
bx {#
bx z#
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
b0 r#
bz q#
bx p#
bx o#
bx n#
bx m#
b0 l#
bz k#
bx j#
bx i#
bx h#
b0 g#
b0 f#
b0 e#
b1101000011000000101100001010 d#
b0 c#
b0 b#
b1100100 a#
b0 `#
b0 _#
b0 ^#
bx ]#
bx \#
b0 [#
b0 Z#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
b0 p"
b0 o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
b0 ]"
bz \"
bx ["
bx Z"
bx Y"
bx X"
b0 W"
bz V"
bx U"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
b100 F"
bx E"
bx :"
bx 9"
bx 8"
b1 7"
06"
05"
b0 4"
bx 3"
bx 2"
bx 1"
bx 0"
b0 /"
bx ."
b0 -"
b0 ,"
bx +"
bx *"
0)"
bx ("
bx '"
bx &"
bx %"
b0 $"
b0 #"
bx ""
bx !"
x~
x}
x|
x{
bx z
bx y
bx x
bx w
0v
0u
xt
xs
0r
xq
xp
xo
b0 n
b0 m
b0 l
b1101000011000000101100001010 k
b0 j
b0 i
b1100100 h
b0 g
b0 f
b0 e
0d
xc
xb
0a
x`
x_
x^
0]
bx \
bx [
bx Z
1Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
0/
x.
x-
x,
bx +
bx *
0)
x(
x'
bx &
bx %
bx $
bx #
bx "
x!
$end
#1
b0 &
b0 9"
b0 o$
b0 '"
b0 N"
b0 a"
b0 ("
b0 O"
b0 ["
b0 "
b0 X"
b0 ^"
b0 m#
b0 s#
b0 9$
b0 g$
b100 %
b100 ?$
b100 A$
1!
b0 ""
b0 :"
b0 n#
b0 !"
b0 c"
b0 t#
b0 j$
0~
b0 j"
b0 i"
b0 h"
b0 z#
b0 y#
b0 ~#
b0 L"
b0 M"
b0 2
b0 `"
b0 k"
b0 d$
b0 f$
b0 4
b0 Z"
b0 l"
b0 ;$
b0 c$
b0 e$
b0 '#
b0 &#
b0 (#
b0 $
b0 8$
b0 q$
0Y
b0 #
b0 U"
b10010011 x
b10010011 z"
b10010011 6$
b100 Z
b100 G"
b100 =$
b11111111111111111111111111111100 I"
b0 5
b0 H"
b0 {"
b0 5$
b0 B$
b0 w
b0 }"
b0 '$
b0 *"
b0 n"
b0 |"
0|
0s
b0 *
b0 y"
b0 x#
b0 +
b0 x"
b0 w#
b0 7
b0 d"
b0 u"
b0 v#
b0 y
b0 t"
b0 k$
b0 0
b0 w"
b0 o#
b0 3
b0 v"
b0 i#
b0 +"
b0 s"
b0 l$
b0 3"
b0 8"
b0 q"
b0 ."
b0 r"
b0 n$
0p
0'
0b
0_
0-
0}
b0 8
b0 f"
b0 !#
b0 u#
b0 &"
b0 "#
b0 h#
b0 1"
b0 Y"
b0 _"
b0 e"
b0 ~"
b0 \#
b0 j#
b0 p#
b0 1
b0 g"
b0 ]#
0t
0q
0(
0c
0`
0.
0{
b0 6
b0 %#
b0 {#
b0 h$
b0 0"
b0 ##
b0 7$
b0 %"
b0 $#
b0 p$
0o
0^
0,
b0 ?
b0 \$
b0 @
b0 [$
b0 A
b0 Z$
b0 C
b0 X$
b0 D
b0 W$
b0 E
b0 V$
b0 F
b0 U$
b0 G
b0 T$
b0 H
b0 S$
b0 I
b0 R$
b0 J
b0 Q$
b0 K
b0 P$
b0 L
b0 O$
b0 N
b0 M$
b0 O
b0 L$
b0 P
b0 K$
b0 Q
b0 J$
b0 R
b0 I$
b0 S
b0 H$
b0 T
b0 G$
b0 U
b0 F$
b0 V
b0 E$
b0 W
b0 D$
b0 9
b0 b$
b0 :
b0 a$
b0 ;
b0 `$
b0 <
b0 _$
b0 =
b0 ^$
b0 >
b0 ]$
b0 B
b0 Y$
b0 M
b0 N$
b0 X
b0 C$
b100000 i$
16"
#5
1Y
06"
#10
b0 [
b0 J"
b0 >$
b0 \
b0 K"
b0 <$
b1 /"
b1 o"
b1 [#
b1 4"
b1 p"
b1 Z#
1a
1/
b0 z
b0 m"
b0 4$
b0 :$
b0 @$
b1000 %
b1000 ?$
b1000 A$
b1 h"
b10011 ~#
b10011 M"
b10011 (#
bx &"
bx "#
bx h#
bx 1"
bx Y"
bx _"
bx e"
bx ~"
bx \#
bx j#
bx p#
bx y
bx t"
bx k$
b10010011 w
b10010011 }"
b10010011 '$
b101000000000000100010011 x
b101000000000000100010011 z"
b101000000000000100010011 6$
b1000 Z
b1000 G"
b1000 =$
b0 I"
b100 5
b100 H"
b100 {"
b100 5$
b100 B$
b10 7"
15"
#15
05"
#20
b1010 \
b1010 K"
b1010 <$
b1100 %
b1100 ?$
b1100 A$
b1010 z
b1010 m"
b1010 4$
b1010 :$
b1010 @$
b0 2"
b0 E"
b0 b"
1!
bx "
bx X"
bx ^"
bx m#
bx s#
bx 9$
bx g$
b1010 j"
b10 h"
b1010 z#
b1010 f$
bx $
bx 8$
bx q$
b110010011 x
b110010011 z"
b110010011 6$
b1100 Z
b1100 G"
b1100 =$
b1110 [
b1110 J"
b1110 >$
b100 I"
b1000 5
b1000 H"
b1000 {"
b1000 5$
b1000 B$
b101000000000000100010011 w
b101000000000000100010011 }"
b101000000000000100010011 '$
b100 *"
b100 n"
b100 |"
b1 7
b1 d"
b1 u"
b1 v#
b0 y
b0 t"
b0 k$
b1 3"
b1 8"
b1 q"
b1 ."
b1 r"
b1 n$
1_
1-
bx 0"
bx ##
bx 7$
bx %"
bx $#
bx p$
b11 7"
15"
#25
05"
#30
b1010 2"
b1010 E"
b1010 b"
0!
b0 \
b0 K"
b0 <$
b1010 &
b1010 9"
b1010 o$
b0 z
b0 m"
b0 4$
b0 :$
b0 @$
b10000 %
b10000 ?$
b10000 A$
b0 j"
b11 h"
b0 z#
b0 f$
b1 8
b1 f"
b1 !#
b1 u#
b0 &"
b0 "#
b0 h#
b0 1"
b0 Y"
b0 _"
b0 e"
b0 ~"
b0 \#
b0 j#
b0 p#
1`
1.
b1010 *
b1010 y"
b1010 x#
b10 7
b10 d"
b10 u"
b10 v#
b1010 y
b1010 t"
b1010 k$
b100 +"
b100 s"
b100 l$
b110010011 w
b110010011 }"
b110010011 '$
b1000 *"
b1000 n"
b1000 |"
b1000000000100011001000110110011 x
b1000000000100011001000110110011 z"
b1000000000100011001000110110011 6$
b10000 Z
b10000 G"
b10000 =$
b1000 [
b1000 J"
b1000 >$
b1000 I"
b1100 5
b1100 H"
b1100 {"
b1100 5$
b1100 B$
b100 7"
15"
#35
05"
#40
1!
b0 2"
b0 E"
b0 b"
b0 '"
b0 N"
b0 a"
b1 4"
b1 p"
b1 Z#
b0 /"
b0 o"
b0 [#
1a
1/
b10100 %
b10100 ?$
b10100 A$
b0 &
b0 9"
b0 o$
b0 "
b0 X"
b0 ^"
b0 m#
b0 s#
b0 9$
b0 g$
b0 2
b0 `"
b0 k"
b0 d$
b0 M
b0 N$
b1 j"
b11 i"
b1 z#
b11 y#
b110011 ~#
b1 L"
b110011 M"
b1 f$
b11 e$
b100000 '#
b1 &#
b110011 (#
b0 $
b0 8$
b0 q$
b100001000000010010011 x
b100001000000010010011 z"
b100001000000010010011 6$
b10100 Z
b10100 G"
b10100 =$
b1100 [
b1100 J"
b1100 >$
b1100 I"
b10000 5
b10000 H"
b10000 {"
b10000 5$
b10000 B$
b1000000000100011001000110110011 w
b1000000000100011001000110110011 }"
b1000000000100011001000110110011 '$
b1100 *"
b1100 n"
b1100 |"
b0 *
b0 y"
b0 x#
b11 7
b11 d"
b11 u"
b11 v#
b0 y
b0 t"
b0 k$
b1000 +"
b1000 s"
b1000 l$
b10 8
b10 f"
b10 !#
b10 u#
b1010 1"
b1010 Y"
b1010 _"
b1010 e"
b1010 ~"
b1010 \#
b1010 j#
b1010 p#
b1 6
b1 %#
b1 {#
b1 h$
b0 0"
b0 ##
b0 7$
b0 %"
b0 $#
b0 p$
1^
1,
b101 7"
15"
#45
05"
#50
b1010 B
b1010 Y$
b1 \
b1 K"
b1 <$
b1 /"
b1 o"
b1 [#
b1 4"
b1 p"
b1 Z#
1a
1/
b1010 "
b1010 X"
b1010 ^"
b1010 m#
b1010 s#
b1010 9$
b1010 g$
b1 $"
b1 l#
b1 %$
b1 z
b1 m"
b1 4$
b1 :$
b1 @$
b11000 %
b11000 ?$
b11000 A$
b1 i"
b1 h"
b1 y#
b10011 ~#
b0 L"
b10011 M"
b1 e$
b0 '#
b0 &#
b10011 (#
b10 6
b10 %#
b10 {#
b10 h$
b1010 0"
b1010 ##
b1010 7$
b11 8
b11 f"
b11 !#
b11 u#
b0 1"
b0 Y"
b0 _"
b0 e"
b0 ~"
b0 \#
b0 j#
b0 p#
b1 *
b1 y"
b1 x#
b11 +
b11 x"
b11 w#
b1100 +"
b1100 s"
b1100 l$
b0 ."
b0 r"
b0 n$
b100001000000010010011 w
b100001000000010010011 }"
b100001000000010010011 '$
b10000 *"
b10000 n"
b10000 |"
b11111110001000001001111001100011 x
b11111110001000001001111001100011 z"
b11111110001000001001111001100011 6$
b11000 Z
b11000 G"
b11000 =$
b10001 [
b10001 J"
b10001 >$
b10000 I"
b10100 5
b10100 H"
b10100 {"
b10100 5$
b10100 B$
b110 7"
15"
#55
05"
#60
b11111111111111111111111111111000 \
b11111111111111111111111111111000 K"
b11111111111111111111111111111000 <$
b1 2"
b1 E"
b1 b"
0!
1]
b0 #
b0 U"
0Y
b1010 '"
b1010 N"
b1010 a"
b0 4"
b0 p"
b0 Z#
b0 /"
b0 o"
b0 [#
0a
0/
b11100 %
b11100 ?$
b11100 A$
b11111111111111111111111111111000 z
b11111111111111111111111111111000 m"
b11111111111111111111111111111000 4$
b11111111111111111111111111111000 :$
b11111111111111111111111111111000 @$
b1 &
b1 9"
b1 o$
b0 $"
b0 l#
b0 %$
b0 >
b0 ]$
b0 "
b0 X"
b0 ^"
b0 m#
b0 s#
b0 9$
b0 g$
b10 j"
b11100 h"
b10 z#
b1100011 ~#
b1 L"
b1100011 M"
b1010 2
b1010 `"
b1010 k"
b1010 d$
b10 f$
b1111111 '#
b1 &#
b1100011 (#
b11111111111111111111111111111111 x
b11111111111111111111111111111111 z"
b11111111111111111111111111111111 6$
b11100 Z
b11100 G"
b11100 =$
b1100 [
b1100 J"
b1100 >$
b10100 I"
b11000 5
b11000 H"
b11000 {"
b11000 5$
b11000 B$
b11111110001000001001111001100011 w
b11111110001000001001111001100011 }"
b11111110001000001001111001100011 '$
b10100 *"
b10100 n"
b10100 |"
b1 +
b1 x"
b1 w#
b1 7
b1 d"
b1 u"
b1 v#
b1 y
b1 t"
b1 k$
b10000 +"
b10000 s"
b10000 l$
b1 ."
b1 r"
b1 n$
b11 6
b11 %#
b11 {#
b11 h$
b0 0"
b0 ##
b0 7$
b111 7"
15"
#65
b11000 %
b11000 ?$
b11000 A$
b10 4"
b10 p"
b10 Z#
b11111110001000001001111001100011 x
b11111110001000001001111001100011 z"
b11111110001000001001111001100011 6$
b11000 Z
b11000 G"
b11000 =$
b1000 [
b1000 J"
b1000 >$
b10000 I"
b10100 5
b10100 H"
b10100 {"
b10100 5$
b10100 B$
0]
05"
