$date
	Wed Jan  8 04:31:13 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module microTestbench $end
$var wire 1 ! zeroFlag $end
$var wire 32 " writeBackData [31:0] $end
$var wire 32 # signExtenderOutputData [31:0] $end
$var wire 32 $ selectedPC [31:0] $end
$var wire 32 % selectedOp2 [31:0] $end
$var wire 1 & sb_ID_EX_out $end
$var wire 1 ' sb_EX_MEM_out $end
$var wire 1 ( sb $end
$var wire 5 ) rs2_ID_EX_out [4:0] $end
$var wire 5 * rs1_ID_EX_out [4:0] $end
$var wire 1 + regWrite_MEM_WB_out $end
$var wire 1 , regWrite_ID_EX_out $end
$var wire 1 - regWrite_EX_MEM_out $end
$var wire 1 . regWrite $end
$var wire 32 / readData2_ID_EX_out [31:0] $end
$var wire 32 0 readData2_EX_MEM_out [31:0] $end
$var wire 32 1 readData2 [31:0] $end
$var wire 32 2 readData1_ID_EX_out [31:0] $end
$var wire 32 3 readData1 [31:0] $end
$var wire 32 4 readAddress [31:0] $end
$var wire 5 5 rd_MEM_WB_out [4:0] $end
$var wire 5 6 rd_ID_EX_out [4:0] $end
$var wire 5 7 rd_EX_MEM_out [4:0] $end
$var wire 32 8 r9 [31:0] $end
$var wire 32 9 r8 [31:0] $end
$var wire 32 : r7 [31:0] $end
$var wire 32 ; r6 [31:0] $end
$var wire 32 < r5 [31:0] $end
$var wire 32 = r4 [31:0] $end
$var wire 32 > r32 [31:0] $end
$var wire 32 ? r31 [31:0] $end
$var wire 32 @ r30 [31:0] $end
$var wire 32 A r3 [31:0] $end
$var wire 32 B r29 [31:0] $end
$var wire 32 C r28 [31:0] $end
$var wire 32 D r27 [31:0] $end
$var wire 32 E r26 [31:0] $end
$var wire 32 F r25 [31:0] $end
$var wire 32 G r24 [31:0] $end
$var wire 32 H r23 [31:0] $end
$var wire 32 I r22 [31:0] $end
$var wire 32 J r21 [31:0] $end
$var wire 32 K r20 [31:0] $end
$var wire 32 L r2 [31:0] $end
$var wire 32 M r19 [31:0] $end
$var wire 32 N r18 [31:0] $end
$var wire 32 O r17 [31:0] $end
$var wire 32 P r16 [31:0] $end
$var wire 32 Q r15 [31:0] $end
$var wire 32 R r14 [31:0] $end
$var wire 32 S r13 [31:0] $end
$var wire 32 T r12 [31:0] $end
$var wire 32 U r11 [31:0] $end
$var wire 32 V r10 [31:0] $end
$var wire 32 W r1 [31:0] $end
$var wire 32 X pcPlus4 [31:0] $end
$var wire 32 Y pcBranched [31:0] $end
$var wire 32 Z pcBranchOperand [31:0] $end
$var wire 1 [ nop $end
$var wire 1 \ memtoReg_MEM_WB_out $end
$var wire 1 ] memtoReg_ID_EX_out $end
$var wire 1 ^ memtoReg_EX_MEM_out $end
$var wire 1 _ memtoReg $end
$var wire 1 ` memWrite_ID_EX_out $end
$var wire 1 a memWrite_EX_MEM_out $end
$var wire 1 b memWrite $end
$var wire 32 c m8 [31:0] $end
$var wire 32 d m4 [31:0] $end
$var wire 32 e m36 [31:0] $end
$var wire 32 f m32 [31:0] $end
$var wire 32 g m28 [31:0] $end
$var wire 32 h m24 [31:0] $end
$var wire 32 i m20 [31:0] $end
$var wire 32 j m16 [31:0] $end
$var wire 32 k m12 [31:0] $end
$var wire 32 l m0 [31:0] $end
$var wire 1 m lh_MEM_WB_out $end
$var wire 1 n lh_ID_EX_out $end
$var wire 1 o lh_EX_MEM_out $end
$var wire 1 p lh $end
$var wire 1 q ld_ID_EX_out $end
$var wire 1 r ld_EX_MEM_out $end
$var wire 1 s ld $end
$var wire 1 t jalr $end
$var wire 32 u instruction_IF_ID_out [31:0] $end
$var wire 32 v instruction [31:0] $end
$var wire 32 w immediate_ID_EX_out [31:0] $end
$var wire 32 x immediate [31:0] $end
$var wire 1 y halt_MEM_WB_out $end
$var wire 1 z halt_ID_EX_out $end
$var wire 1 { halt_EX_MEM_out $end
$var wire 1 | halt $end
$var wire 32 } forwardedOp2 [31:0] $end
$var wire 32 ~ forwardedOp1 [31:0] $end
$var wire 2 !" forwardOp2 [1:0] $end
$var wire 2 "" forwardOp1 [1:0] $end
$var wire 32 #" data_MEM_WB_out [31:0] $end
$var wire 32 $" data [31:0] $end
$var wire 32 %" branchUnitOperand2 [31:0] $end
$var wire 32 &" branchUnitOperand1 [31:0] $end
$var wire 1 '" PCsrc $end
$var wire 32 (" PC_IF_ID_out [31:0] $end
$var wire 32 )" PC_ID_EX_out [31:0] $end
$var wire 2 *" ID_forwardOp2 [1:0] $end
$var wire 2 +" ID_forwardOp1 [1:0] $end
$var wire 2 ," ALUsrc_ID_EX_out [1:0] $end
$var wire 2 -" ALUsrc [1:0] $end
$var wire 32 ." ALUresult_MEM_WB_out [31:0] $end
$var wire 32 /" ALUresult_EX_MEM_out [31:0] $end
$var wire 32 0" ALUresult [31:0] $end
$var wire 4 1" ALUop_ID_EX_out [3:0] $end
$var wire 4 2" ALUop [3:0] $end
$var reg 1 3" clock $end
$var reg 1 4" reset $end
$var integer 32 5" cycles [31:0] $end
$scope module ALUDUT $end
$var wire 4 6" operation [3:0] $end
$var wire 32 7" operand2 [31:0] $end
$var wire 32 8" operand1 [31:0] $end
$var parameter 4 9" addop $end
$var parameter 4 :" andop $end
$var parameter 4 ;" jalop $end
$var parameter 4 <" luiop $end
$var parameter 4 =" orop $end
$var parameter 4 >" sllop $end
$var parameter 4 ?" sltop $end
$var parameter 4 @" srlop $end
$var parameter 4 A" subop $end
$var parameter 4 B" xorop $end
$var reg 32 C" result [31:0] $end
$var reg 1 ! zeroFlag $end
$upscope $end
$scope module add4Adder $end
$var wire 32 D" operand2 [31:0] $end
$var wire 32 E" sum [31:0] $end
$var wire 32 F" operand1 [31:0] $end
$upscope $end
$scope module branchAdder $end
$var wire 32 G" operand1 [31:0] $end
$var wire 32 H" sum [31:0] $end
$var wire 32 I" operand2 [31:0] $end
$upscope $end
$scope module branchUnit $end
$var wire 1 3" clock $end
$var wire 3 J" funct3 [2:0] $end
$var wire 7 K" opCode [6:0] $end
$var wire 1 4" reset $end
$var wire 32 L" operand2 [31:0] $end
$var wire 32 M" operand1 [31:0] $end
$var wire 1 [ nop $end
$var parameter 7 N" bOp $end
$var parameter 3 O" beqf3 $end
$var parameter 3 P" bnef3 $end
$var parameter 7 Q" jalOp $end
$var parameter 7 R" jalrOp $end
$var reg 1 '" PCsrc $end
$upscope $end
$scope module branchUnitOp1Mux $end
$var wire 32 S" i3 [31:0] $end
$var wire 2 T" select [1:0] $end
$var wire 32 U" i2 [31:0] $end
$var wire 32 V" i1 [31:0] $end
$var wire 32 W" i0 [31:0] $end
$var reg 32 X" out [31:0] $end
$upscope $end
$scope module branchUnitOp2Mux $end
$var wire 32 Y" i3 [31:0] $end
$var wire 2 Z" select [1:0] $end
$var wire 32 [" i2 [31:0] $end
$var wire 32 \" i1 [31:0] $end
$var wire 32 ]" i0 [31:0] $end
$var reg 32 ^" out [31:0] $end
$upscope $end
$scope module bufferEX_MEM $end
$var wire 32 _" ALUresult_in [31:0] $end
$var wire 1 3" clock $end
$var wire 1 4" reset $end
$var wire 1 & sb_in $end
$var wire 1 , regWrite_in $end
$var wire 32 `" readData2_in [31:0] $end
$var wire 5 a" rd_in [4:0] $end
$var wire 1 ] memtoReg_in $end
$var wire 1 ` memWrite_in $end
$var wire 1 n lh_in $end
$var wire 1 q ld_in $end
$var wire 1 z halt_in $end
$var reg 32 b" ALUresult [31:0] $end
$var reg 1 { halt $end
$var reg 1 r ld $end
$var reg 1 o lh $end
$var reg 1 a memWrite $end
$var reg 1 ^ memtoReg $end
$var reg 5 c" rd [4:0] $end
$var reg 32 d" readData2 [31:0] $end
$var reg 1 - regWrite $end
$var reg 1 ' sb $end
$upscope $end
$scope module bufferID_EX $end
$var wire 1 3" clock $end
$var wire 5 e" rd_in [4:0] $end
$var wire 1 4" reset $end
$var wire 5 f" rs1_in [4:0] $end
$var wire 5 g" rs2_in [4:0] $end
$var wire 1 ( sb_in $end
$var wire 1 . regWrite_in $end
$var wire 32 h" readData2_in [31:0] $end
$var wire 32 i" readData1_in [31:0] $end
$var wire 1 [ nop $end
$var wire 1 _ memtoReg_in $end
$var wire 1 b memWrite_in $end
$var wire 1 p lh_in $end
$var wire 1 s ld_in $end
$var wire 32 j" immediate_in [31:0] $end
$var wire 1 | halt_in $end
$var wire 32 k" PC_in [31:0] $end
$var wire 2 l" ALUsrc_in [1:0] $end
$var wire 4 m" ALUop_in [3:0] $end
$var reg 4 n" ALUop [3:0] $end
$var reg 2 o" ALUsrc [1:0] $end
$var reg 32 p" PC [31:0] $end
$var reg 1 z halt $end
$var reg 32 q" immediate [31:0] $end
$var reg 1 q ld $end
$var reg 1 n lh $end
$var reg 1 ` memWrite $end
$var reg 1 ] memtoReg $end
$var reg 5 r" rd [4:0] $end
$var reg 32 s" readData1 [31:0] $end
$var reg 32 t" readData2 [31:0] $end
$var reg 1 , regWrite $end
$var reg 5 u" rs1 [4:0] $end
$var reg 5 v" rs2 [4:0] $end
$var reg 1 & sb $end
$upscope $end
$scope module bufferIF_ID $end
$var wire 1 3" clock $end
$var wire 1 4" reset $end
$var wire 32 w" instruction_in [31:0] $end
$var wire 32 x" PC_in [31:0] $end
$var reg 32 y" PC [31:0] $end
$var reg 32 z" instruction [31:0] $end
$upscope $end
$scope module bufferMEM_WB $end
$var wire 32 {" ALUresult_in [31:0] $end
$var wire 1 3" clock $end
$var wire 1 { halt_in $end
$var wire 1 o lh_in $end
$var wire 1 ^ memtoReg_in $end
$var wire 5 |" rd_in [4:0] $end
$var wire 1 - regWrite_in $end
$var wire 1 4" reset $end
$var wire 32 }" data_in [31:0] $end
$var reg 32 ~" ALUresult [31:0] $end
$var reg 32 !# data [31:0] $end
$var reg 1 y halt $end
$var reg 1 m lh $end
$var reg 1 \ memtoReg $end
$var reg 5 "# rd [4:0] $end
$var reg 1 + regWrite $end
$upscope $end
$scope module controlUnit $end
$var wire 3 ## funct3 [2:0] $end
$var wire 7 $# funct7 [6:0] $end
$var wire 7 %# opCode [6:0] $end
$var wire 1 [ nop $end
$var wire 1 | halt $end
$var parameter 7 &# Rtype $end
$var parameter 7 '# addiwOp $end
$var parameter 3 (# addiwf3 $end
$var parameter 4 )# addop $end
$var parameter 3 *# addwf3 $end
$var parameter 7 +# addwf7 $end
$var parameter 3 ,# andf3 $end
$var parameter 7 -# andf7 $end
$var parameter 7 .# andiOp $end
$var parameter 3 /# andif3 $end
$var parameter 4 0# andop $end
$var parameter 7 1# beqOp $end
$var parameter 3 2# beqf3 $end
$var parameter 7 3# bneOp $end
$var parameter 3 4# bnef3 $end
$var parameter 7 5# jalOp $end
$var parameter 4 6# jalop $end
$var parameter 7 7# jalrOp $end
$var parameter 3 8# jalrf3 $end
$var parameter 7 9# lhOp $end
$var parameter 3 :# lhf3 $end
$var parameter 7 ;# luiOp $end
$var parameter 4 <# luiop $end
$var parameter 7 =# lwOp $end
$var parameter 3 ># lwf3 $end
$var parameter 3 ?# orf3 $end
$var parameter 7 @# orf7 $end
$var parameter 7 A# oriOp $end
$var parameter 3 B# orif3 $end
$var parameter 4 C# orop $end
$var parameter 7 D# sbOp $end
$var parameter 3 E# sbf3 $end
$var parameter 3 F# sllf3 $end
$var parameter 7 G# sllf7 $end
$var parameter 4 H# sllop $end
$var parameter 3 I# sltf3 $end
$var parameter 7 J# sltf7 $end
$var parameter 4 K# sltop $end
$var parameter 3 L# srlf3 $end
$var parameter 7 M# srlf7 $end
$var parameter 4 N# srlop $end
$var parameter 3 O# subf3 $end
$var parameter 7 P# subf7 $end
$var parameter 4 Q# subop $end
$var parameter 7 R# swOp $end
$var parameter 3 S# swf3 $end
$var parameter 3 T# xorf3 $end
$var parameter 7 U# xorf7 $end
$var parameter 4 V# xorop $end
$var reg 4 W# ALUop [3:0] $end
$var reg 2 X# ALUsrc [1:0] $end
$var reg 1 t jalr $end
$var reg 1 s ld $end
$var reg 1 p lh $end
$var reg 1 b memWrite $end
$var reg 1 _ memtoReg $end
$var reg 1 . regWrite $end
$var reg 1 ( sb $end
$upscope $end
$scope module dataMem $end
$var wire 32 Y# dataAddress [31:0] $end
$var wire 1 a memWrite $end
$var wire 1 ' sb $end
$var wire 32 Z# writeData [31:0] $end
$var wire 32 [# m8 [31:0] $end
$var wire 32 \# m4 [31:0] $end
$var wire 32 ]# m36 [31:0] $end
$var wire 32 ^# m32 [31:0] $end
$var wire 32 _# m28 [31:0] $end
$var wire 32 `# m24 [31:0] $end
$var wire 32 a# m20 [31:0] $end
$var wire 32 b# m16 [31:0] $end
$var wire 32 c# m12 [31:0] $end
$var wire 32 d# m0 [31:0] $end
$var wire 32 e# data [31:0] $end
$upscope $end
$scope module forwardALUOp1 $end
$var wire 32 f# i0 [31:0] $end
$var wire 32 g# i1 [31:0] $end
$var wire 32 h# i3 [31:0] $end
$var wire 2 i# select [1:0] $end
$var wire 32 j# i2 [31:0] $end
$var reg 32 k# out [31:0] $end
$upscope $end
$scope module forwardALUOp2 $end
$var wire 32 l# i0 [31:0] $end
$var wire 32 m# i1 [31:0] $end
$var wire 32 n# i3 [31:0] $end
$var wire 2 o# select [1:0] $end
$var wire 32 p# i2 [31:0] $end
$var reg 32 q# out [31:0] $end
$upscope $end
$scope module fwUnit $end
$var wire 5 r# EX_MEM_rd [4:0] $end
$var wire 5 s# ID_EX_rd [4:0] $end
$var wire 5 t# ID_EX_rs1 [4:0] $end
$var wire 5 u# ID_EX_rs2 [4:0] $end
$var wire 5 v# IF_ID_rs1 [4:0] $end
$var wire 5 w# IF_ID_rs2 [4:0] $end
$var wire 5 x# MEM_WB_rd [4:0] $end
$var wire 2 y# branch [1:0] $end
$var wire 1 3" clock $end
$var wire 1 z# load_EX_MEM $end
$var wire 1 q load_ID_EX $end
$var wire 7 {# opCode [6:0] $end
$var wire 1 - regWrite_EX_MEM $end
$var wire 1 , regWrite_ID_EX $end
$var wire 1 + regWrite_MEM_WB $end
$var wire 1 4" reset $end
$var parameter 7 |# bOp $end
$var parameter 7 }# jalrOp $end
$var reg 2 ~# ID_forwardOp1 [1:0] $end
$var reg 2 !$ ID_forwardOp2 [1:0] $end
$var reg 2 "$ forwardOp1 [1:0] $end
$var reg 2 #$ forwardOp2 [1:0] $end
$var reg 1 [ nop $end
$upscope $end
$scope module immediateGen $end
$var wire 32 $$ instruction [31:0] $end
$var parameter 7 %$ addiwOp $end
$var parameter 7 &$ andiOp $end
$var parameter 7 '$ beqOp $end
$var parameter 7 ($ bneOp $end
$var parameter 7 )$ jalOp $end
$var parameter 7 *$ jalrOp $end
$var parameter 7 +$ lhOp $end
$var parameter 7 ,$ luiOp $end
$var parameter 7 -$ lwOp $end
$var parameter 7 .$ oriOp $end
$var parameter 7 /$ sbOp $end
$var parameter 7 0$ swOp $end
$var reg 32 1$ out [31:0] $end
$upscope $end
$scope module instMem $end
$var wire 32 2$ instructionAddress [31:0] $end
$var wire 32 3$ instruction [31:0] $end
$upscope $end
$scope module memtoRegMux $end
$var wire 32 4$ i1 [31:0] $end
$var wire 1 \ select $end
$var wire 32 5$ i0 [31:0] $end
$var reg 32 6$ out [31:0] $end
$upscope $end
$scope module pcBranchAdderMux $end
$var wire 32 7$ i0 [31:0] $end
$var wire 1 t select $end
$var wire 32 8$ i1 [31:0] $end
$var reg 32 9$ out [31:0] $end
$upscope $end
$scope module pcMux $end
$var wire 32 :$ i0 [31:0] $end
$var wire 32 ;$ i1 [31:0] $end
$var wire 1 '" select $end
$var reg 32 <$ out [31:0] $end
$upscope $end
$scope module programCounter $end
$var wire 1 '" branch $end
$var wire 1 3" clock $end
$var wire 32 =$ immediate [31:0] $end
$var wire 32 >$ nextAddress [31:0] $end
$var wire 1 [ nop $end
$var wire 1 4" reset $end
$var reg 32 ?$ readAddress [31:0] $end
$upscope $end
$scope module registerFile $end
$var wire 1 3" clock $end
$var wire 32 @$ r1 [31:0] $end
$var wire 32 A$ r10 [31:0] $end
$var wire 32 B$ r11 [31:0] $end
$var wire 32 C$ r12 [31:0] $end
$var wire 32 D$ r13 [31:0] $end
$var wire 32 E$ r14 [31:0] $end
$var wire 32 F$ r15 [31:0] $end
$var wire 32 G$ r16 [31:0] $end
$var wire 32 H$ r17 [31:0] $end
$var wire 32 I$ r18 [31:0] $end
$var wire 32 J$ r19 [31:0] $end
$var wire 32 K$ r2 [31:0] $end
$var wire 32 L$ r20 [31:0] $end
$var wire 32 M$ r21 [31:0] $end
$var wire 32 N$ r22 [31:0] $end
$var wire 32 O$ r23 [31:0] $end
$var wire 32 P$ r24 [31:0] $end
$var wire 32 Q$ r25 [31:0] $end
$var wire 32 R$ r26 [31:0] $end
$var wire 32 S$ r27 [31:0] $end
$var wire 32 T$ r28 [31:0] $end
$var wire 32 U$ r29 [31:0] $end
$var wire 32 V$ r3 [31:0] $end
$var wire 32 W$ r30 [31:0] $end
$var wire 32 X$ r31 [31:0] $end
$var wire 32 Y$ r32 [31:0] $end
$var wire 32 Z$ r4 [31:0] $end
$var wire 32 [$ r5 [31:0] $end
$var wire 32 \$ r6 [31:0] $end
$var wire 32 ]$ r7 [31:0] $end
$var wire 32 ^$ r8 [31:0] $end
$var wire 32 _$ r9 [31:0] $end
$var wire 32 `$ readData1 [31:0] $end
$var wire 32 a$ readData2 [31:0] $end
$var wire 5 b$ readReg1 [4:0] $end
$var wire 5 c$ readReg2 [4:0] $end
$var wire 1 + regWrite $end
$var wire 1 4" reset $end
$var wire 32 d$ writeData [31:0] $end
$var wire 5 e$ writeReg [4:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 f$ i [31:0] $end
$upscope $end
$upscope $end
$scope module selectALUOp2 $end
$var wire 32 g$ i0 [31:0] $end
$var wire 32 h$ i1 [31:0] $end
$var wire 32 i$ i2 [31:0] $end
$var wire 32 j$ i3 [31:0] $end
$var wire 2 k$ select [1:0] $end
$var reg 32 l$ out [31:0] $end
$upscope $end
$scope module signExtenderDUT $end
$var wire 32 m$ inputData [31:0] $end
$var wire 1 m lh $end
$var wire 32 n$ outputData [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 0$
b100011 /$
b10011 .$
b11 -$
b111000 ,$
b11 +$
b1100111 *$
b1101111 )$
b1100011 ($
b1100011 '$
b11011 &$
b10011 %$
b1100111 }#
b1100011 |#
b111 V#
b0 U#
b11 T#
b10 S#
b100011 R#
b10 Q#
b0 P#
b110 O#
b110 N#
b0 M#
b10 L#
b1000 K#
b0 J#
b0 I#
b101 H#
b0 G#
b100 F#
b0 E#
b100011 D#
b100 C#
b111 B#
b10011 A#
b0 @#
b101 ?#
b0 >#
b11 =#
b1010 <#
b111000 ;#
b10 :#
b11 9#
b0 8#
b1100111 7#
b1001 6#
b1101111 5#
b1 4#
b1100011 3#
b0 2#
b1100011 1#
b11 0#
b110 /#
b11011 .#
b0 -#
b111 ,#
b100000 +#
b1 *#
b1 )#
b0 (#
b10011 '#
b110011 &#
b1100111 R"
b1101111 Q"
b1 P"
b0 O"
b1100011 N"
b111 B"
b10 A"
b110 @"
b1000 ?"
b101 >"
b100 ="
b1010 <"
b1001 ;"
b11 :"
b1 9"
$end
#0
$dumpvars
bx n$
bx m$
bx l$
bx k$
bz j$
bx i$
bx h$
bx g$
bx f$
bx e$
bx d$
bx c$
bx b$
bx a$
bx `$
bx _$
bx ^$
bx ]$
bx \$
bx [$
bx Z$
bx Y$
bx X$
bx W$
bx V$
bx U$
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
bx H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
bx 2$
bx 1$
bx $$
b0 #$
b0 "$
b0 !$
b0 ~#
bx {#
zz#
bz y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bx p#
b0 o#
bz n#
bx m#
bx l#
bx k#
bx j#
b0 i#
bz h#
bx g#
bx f#
bx e#
b0 d#
b0 c#
b0 b#
b1101000011000000101100001010 a#
b0 `#
b0 _#
b1100100 ^#
b0 ]#
b0 \#
b0 [#
bx Z#
bx Y#
b0 X#
b0 W#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
b0 m"
b0 l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
b0 Z"
bz Y"
bx X"
bx W"
bx V"
bx U"
b0 T"
bz S"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
b100 D"
bx C"
bx 8"
bx 7"
bx 6"
b1 5"
04"
03"
b0 2"
bx 1"
bx 0"
bx /"
bx ."
b0 -"
bx ,"
b0 +"
b0 *"
bx )"
bx ("
0'"
bx &"
bx %"
bx $"
bx #"
b0 ""
b0 !"
bx ~
bx }
x|
x{
xz
xy
bx x
bx w
bx v
bx u
0t
0s
xr
xq
0p
xo
xn
xm
b0 l
b0 k
b0 j
b1101000011000000101100001010 i
b0 h
b0 g
b1100100 f
b0 e
b0 d
b0 c
0b
xa
x`
0_
x^
x]
x\
0[
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
0.
x-
x,
x+
bx *
bx )
0(
x'
x&
bx %
bx $
bx #
bx "
x!
$end
#1
b0 %
b0 7"
b0 l$
b0 %"
b0 L"
b0 ^"
b0 &"
b0 M"
b0 X"
b0 "
b0 U"
b0 ["
b0 j#
b0 p#
b0 6$
b0 d$
b100 $
b100 <$
b100 >$
1!
b0 ~
b0 8"
b0 k#
b0 }
b0 `"
b0 q#
b0 g$
0|
b0 g"
b0 f"
b0 e"
b0 w#
b0 v#
b0 {#
b0 J"
b0 K"
b0 1
b0 ]"
b0 h"
b0 a$
b0 c$
b0 3
b0 W"
b0 i"
b0 8$
b0 `$
b0 b$
b0 $#
b0 ##
b0 %#
b0 #
b0 5$
b0 n$
b111100000000000010010011 v
b111100000000000010010011 w"
b111100000000000010010011 3$
b100 X
b100 E"
b100 :$
b11111111111111111111111111111100 G"
b0 4
b0 F"
b0 x"
b0 2$
b0 ?$
b0 u
b0 z"
b0 $$
b0 ("
b0 k"
b0 y"
0z
0q
b0 )
b0 v"
b0 u#
b0 *
b0 u"
b0 t#
b0 6
b0 a"
b0 r"
b0 s#
b0 w
b0 q"
b0 h$
b0 /
b0 t"
b0 l#
b0 2
b0 s"
b0 f#
b0 )"
b0 p"
b0 i$
b0 1"
b0 6"
b0 n"
b0 ,"
b0 o"
b0 k$
0n
0&
0`
0]
0,
0{
b0 7
b0 c"
b0 |"
b0 r#
b0 $"
b0 }"
b0 e#
b0 /"
b0 V"
b0 \"
b0 b"
b0 {"
b0 Y#
b0 g#
b0 m#
b0 0
b0 d"
b0 Z#
0r
0o
0'
0a
0^
0-
0y
b0 5
b0 "#
b0 x#
b0 e$
b0 ."
b0 ~"
b0 4$
b0 #"
b0 !#
b0 m$
0m
0\
0+
b0 >
b0 Y$
b0 ?
b0 X$
b0 @
b0 W$
b0 B
b0 U$
b0 C
b0 T$
b0 D
b0 S$
b0 E
b0 R$
b0 F
b0 Q$
b0 G
b0 P$
b0 H
b0 O$
b0 I
b0 N$
b0 J
b0 M$
b0 K
b0 L$
b0 M
b0 J$
b0 N
b0 I$
b0 O
b0 H$
b0 P
b0 G$
b0 Q
b0 F$
b0 R
b0 E$
b0 S
b0 D$
b0 T
b0 C$
b0 U
b0 B$
b0 V
b0 A$
b0 8
b0 _$
b0 9
b0 ^$
b0 :
b0 ]$
b0 ;
b0 \$
b0 <
b0 [$
b0 =
b0 Z$
b0 A
b0 V$
b0 L
b0 K$
b0 W
b0 @$
b100000 f$
14"
#5
04"
#10
b1111 Y
b1111 H"
b1111 ;$
b1111 Z
b1111 I"
b1111 9$
b1 -"
b1 l"
b1 X#
b1 2"
b1 m"
b1 W#
1_
1.
b1111 x
b1111 j"
b1111 1$
b1111 7$
b1111 =$
b1000 $
b1000 <$
b1000 >$
b1111 g"
b1 e"
b1111 w#
b10011 {#
b10011 K"
b1111 c$
b10011 %#
bx $"
bx }"
bx e#
bx /"
bx V"
bx \"
bx b"
bx {"
bx Y#
bx g#
bx m#
bx w
bx q"
bx h$
b111100000000000010010011 u
b111100000000000010010011 z"
b111100000000000010010011 $$
b101000000000000100010011 v
b101000000000000100010011 w"
b101000000000000100010011 3$
b1000 X
b1000 E"
b1000 :$
b0 G"
b100 4
b100 F"
b100 x"
b100 2$
b100 ?$
b10 5"
13"
#15
03"
#20
b1010 Z
b1010 I"
b1010 9$
b1100 $
b1100 <$
b1100 >$
b1010 x
b1010 j"
b1010 1$
b1010 7$
b1010 =$
b1111 0"
b1111 C"
b1111 _"
0!
b1111 %
b1111 7"
b1111 l$
bx "
bx U"
bx ["
bx j#
bx p#
bx 6$
bx d$
b1010 g"
b10 e"
b1010 w#
b1010 c$
bx #
bx 5$
bx n$
b1000001000000110110011 v
b1000001000000110110011 w"
b1000001000000110110011 3$
b1100 X
b1100 E"
b1100 :$
b1110 Y
b1110 H"
b1110 ;$
b100 G"
b1000 4
b1000 F"
b1000 x"
b1000 2$
b1000 ?$
b101000000000000100010011 u
b101000000000000100010011 z"
b101000000000000100010011 $$
b100 ("
b100 k"
b100 y"
b1111 )
b1111 v"
b1111 u#
b1 6
b1 a"
b1 r"
b1 s#
b1111 w
b1111 q"
b1111 h$
b1 1"
b1 6"
b1 n"
b1 ,"
b1 o"
b1 k$
1]
1,
bx ."
bx ~"
bx 4$
bx #"
bx !#
bx m$
b11 5"
13"
#25
03"
#30
b1010 0"
b1010 C"
b1010 _"
b1000 2"
b1000 m"
b1000 W#
b0 -"
b0 l"
b0 X#
1_
1.
b1010 %
b1010 7"
b1010 l$
b10000 $
b10000 <$
b10000 >$
b10 g"
b1 f"
b11 e"
b10 w#
b1 v#
b110011 {#
b110011 K"
b10 c$
b1 b$
b110011 %#
b1 7
b1 c"
b1 |"
b1 r#
b0 $"
b0 }"
b0 e#
b1111 /"
b1111 V"
b1111 \"
b1111 b"
b1111 {"
b1111 Y#
b1111 g#
b1111 m#
1^
1-
b1010 )
b1010 v"
b1010 u#
b10 6
b10 a"
b10 r"
b10 s#
b1010 w
b1010 q"
b1010 h$
b100 )"
b100 p"
b100 i$
b1000001000000110110011 u
b1000001000000110110011 z"
b1000001000000110110011 $$
b1000 ("
b1000 k"
b1000 y"
b11000010001100011 v
b11000010001100011 w"
b11000010001100011 3$
b10000 X
b10000 E"
b10000 :$
b10010 Y
b10010 H"
b10010 ;$
b1000 G"
b1100 4
b1100 F"
b1100 x"
b1100 2$
b1100 ?$
b100 5"
13"
#35
03"
#40
b10000 Z
b10000 I"
b10000 9$
0!
b1010 }
b1010 `"
b1010 q#
b1010 g$
b1111 ~
b1111 8"
b1111 k#
1[
0'"
b0 2"
b0 m"
b0 W#
0_
0.
b10100 $
b10100 <$
b10100 >$
b10000 x
b10000 j"
b10000 1$
b10000 7$
b10000 =$
b0 0"
b0 C"
b0 _"
b1010 %
b1010 7"
b1010 l$
b1111 "
b1111 U"
b1111 ["
b1111 j#
b1111 p#
b1111 6$
b1111 d$
b1 !"
b1 o#
b1 #$
b10 ""
b10 i#
b10 "$
b1111 L
b1111 K$
b0 g"
b11 f"
b1000 e"
b0 w#
b11 v#
b1100011 {#
b1100011 K"
b0 c$
b11 b$
b1100011 %#
b0 #
b0 5$
b0 n$
b100000000001000010011 v
b100000000001000010011 w"
b100000000001000010011 3$
b10100 X
b10100 E"
b10100 :$
b11100 Y
b11100 H"
b11100 ;$
b1100 G"
b10000 4
b10000 F"
b10000 x"
b10000 2$
b10000 ?$
b11000010001100011 u
b11000010001100011 z"
b11000010001100011 $$
b1100 ("
b1100 k"
b1100 y"
b10 )
b10 v"
b10 u#
b1 *
b1 u"
b1 t#
b11 6
b11 a"
b11 r"
b11 s#
b1000 )"
b1000 p"
b1000 i$
b1000 1"
b1000 6"
b1000 n"
b0 ,"
b0 o"
b0 k$
b10 7
b10 c"
b10 |"
b10 r#
b1010 /"
b1010 V"
b1010 \"
b1010 b"
b1010 {"
b1010 Y#
b1010 g#
b1010 m#
b1 5
b1 "#
b1 x#
b1 e$
b1111 ."
b1111 ~"
b1111 4$
b0 #"
b0 !#
b0 m$
1\
1+
b101 5"
13"
#45
b10000 $
b10000 <$
b10000 >$
b10 2"
b10 m"
b10 W#
b11000010001100011 v
b11000010001100011 w"
b11000010001100011 3$
b10000 X
b10000 E"
b10000 :$
b11000 Y
b11000 H"
b11000 ;$
b1000 G"
b1100 4
b1100 F"
b1100 x"
b1100 2$
b1100 ?$
0[
03"
#50
1!
b0 %
b0 7"
b0 l$
b0 ~
b0 8"
b0 k#
b1010 A
b1010 V$
b1010 "
b1010 U"
b1010 ["
b1010 j#
b1010 p#
b1010 6$
b1010 d$
b0 }
b0 `"
b0 q#
b0 g$
b0 0"
b0 C"
b0 _"
b1 +"
b1 T"
b1 ~#
b0 !"
b0 o#
b0 #$
b1 ""
b1 i#
b1 "$
b11100 $
b11100 <$
b11100 >$
1'"
b10 5
b10 "#
b10 x#
b10 e$
b1010 ."
b1010 ~"
b1010 4$
b11 7
b11 c"
b11 |"
b11 r#
b0 /"
b0 V"
b0 \"
b0 b"
b0 {"
b0 Y#
b0 g#
b0 m#
b1010 0
b1010 d"
b1010 Z#
b0 )
b0 v"
b0 u#
b11 *
b11 u"
b11 t#
b1000 6
b1000 a"
b1000 r"
b1000 s#
b10000 w
b10000 q"
b10000 h$
b1100 )"
b1100 p"
b1100 i$
b10 1"
b10 6"
b10 n"
0]
0,
b100000000001000010011 v
b100000000001000010011 w"
b100000000001000010011 3$
b10100 X
b10100 E"
b10100 :$
b11100 Y
b11100 H"
b11100 ;$
b1100 G"
b10000 4
b10000 F"
b10000 x"
b10000 2$
b10000 ?$
b110 5"
13"
#55
b100000 $
b100000 <$
b100000 >$
b10101000000000001010010011 v
b10101000000000001010010011 w"
b10101000000000001010010011 3$
b100000 X
b100000 E"
b100000 :$
b101000 Y
b101000 H"
b101000 ;$
b11000 G"
b11100 4
b11100 F"
b11100 x"
b11100 2$
b11100 ?$
0'"
03"
#60
b101010 Z
b101010 I"
b101010 9$
b1 -"
b1 l"
b1 X#
1_
1.
b1 2"
b1 m"
b1 W#
b100100 $
b100100 <$
b100100 >$
b101010 x
b101010 j"
b101010 1$
b101010 7$
b101010 =$
b0 +"
b0 T"
b0 ~#
b10 ""
b10 i#
b10 "$
b0 =
b0 Z$
b0 "
b0 U"
b0 ["
b0 j#
b0 p#
b0 6$
b0 d$
b1010 g"
b0 f"
b101 e"
b1010 w#
b0 v#
b10011 {#
b10011 K"
b1010 c$
b0 b$
b1 $#
b10011 %#
0'"
b11111111111111111111111111111111 v
b11111111111111111111111111111111 w"
b11111111111111111111111111111111 3$
b100100 X
b100100 E"
b100100 :$
b1000110 Y
b1000110 H"
b1000110 ;$
b11100 G"
b100000 4
b100000 F"
b100000 x"
b100000 2$
b100000 ?$
b10101000000000001010010011 u
b10101000000000001010010011 z"
b10101000000000001010010011 $$
b11100 ("
b11100 k"
b11100 y"
b1000 7
b1000 c"
b1000 |"
b1000 r#
b0 0
b0 d"
b0 Z#
0^
0-
b11 5
b11 "#
b11 x#
b11 e$
b0 ."
b0 ~"
b0 4$
b111 5"
13"
#65
03"
#70
b101010 0"
b101010 C"
b101010 _"
b0 2"
b0 m"
b0 W#
b0 -"
b0 l"
b0 X#
0_
0.
0!
b101010 %
b101010 7"
b101010 l$
b0 ""
b0 i#
b0 "$
b101000 $
b101000 <$
b101000 >$
1|
b11111 g"
b11111 f"
b11111 e"
b11111 w#
b11111 v#
b1111111 {#
b111 J"
b1111111 K"
b11111 c$
b11111 b$
b1111111 $#
b111 ##
b1111111 %#
b1000 5
b1000 "#
b1000 x#
b1000 e$
0\
0+
b1010 )
b1010 v"
b1010 u#
b0 *
b0 u"
b0 t#
b101 6
b101 a"
b101 r"
b101 s#
b101010 w
b101010 q"
b101010 h$
b11100 )"
b11100 p"
b11100 i$
b1 1"
b1 6"
b1 n"
b1 ,"
b1 o"
b1 k$
1]
1,
b11111111111111111111111111111111 u
b11111111111111111111111111111111 z"
b11111111111111111111111111111111 $$
b100000 ("
b100000 k"
b100000 y"
bx v
bx w"
bx 3$
b101000 X
b101000 E"
b101000 :$
b1001010 Y
b1001010 H"
b1001010 ;$
b100000 G"
b100100 4
b100100 F"
b100100 x"
b100100 2$
b100100 ?$
b1000 5"
13"
#75
03"
#80
1!
bx %"
bx L"
bx ^"
bx &"
bx M"
bx X"
b101100 $
b101100 <$
b101100 >$
b0 %
b0 7"
b0 l$
x|
bx g"
bx f"
bx e"
bx w#
bx v#
bx {#
bx J"
bx K"
bx 1
bx ]"
bx h"
bx a$
bx c$
bx 3
bx W"
bx i"
bx 8$
bx `$
bx b$
bx $#
bx ##
bx %#
b101100 X
b101100 E"
b101100 :$
b1001110 Y
b1001110 H"
b1001110 ;$
b100100 G"
b101000 4
b101000 F"
b101000 x"
b101000 2$
b101000 ?$
bx u
bx z"
bx $$
b100100 ("
b100100 k"
b100100 y"
1z
b11111 )
b11111 v"
b11111 u#
b11111 *
b11111 u"
b11111 t#
b11111 6
b11111 a"
b11111 r"
b11111 s#
b100000 )"
b100000 p"
b100000 i$
b0 1"
b0 6"
b0 n"
b0 ,"
b0 o"
b0 k$
0]
0,
b101 7
b101 c"
b101 |"
b101 r#
bx $"
bx }"
bx e#
b101010 /"
b101010 V"
b101010 \"
b101010 b"
b101010 {"
b101010 Y#
b101010 g#
b101010 m#
1^
1-
b1001 5"
13"
#85
03"
#90
b101010 ;
b101010 \$
bx %
bx 7"
bx l$
x!
b101010 "
b101010 U"
b101010 ["
b101010 j#
b101010 p#
b101010 6$
b101010 d$
bx }
bx `"
bx q#
bx g$
bx ~
bx 8"
bx k#
b110000 $
b110000 <$
b110000 >$
bx #
bx 5$
bx n$
b101 5
b101 "#
b101 x#
b101 e$
b101010 ."
b101010 ~"
b101010 4$
bx #"
bx !#
bx m$
1\
1+
1{
b11111 7
b11111 c"
b11111 |"
b11111 r#
0^
0-
xz
bx )
bx v"
bx u#
bx *
bx u"
bx t#
bx 6
bx a"
bx r"
bx s#
bx /
bx t"
bx l#
bx 2
bx s"
bx f#
b100100 )"
b100100 p"
b100100 i$
b101000 ("
b101000 k"
b101000 y"
b110000 X
b110000 E"
b110000 :$
b1010010 Y
b1010010 H"
b1010010 ;$
b101000 G"
b101100 4
b101100 F"
b101100 x"
b101100 2$
b101100 ?$
b1010 5"
13"
#95
03"
#100
b110100 $
b110100 <$
b110100 >$
bx "
bx U"
bx ["
bx j#
bx p#
bx 6$
bx d$
b110100 X
b110100 E"
b110100 :$
b1010110 Y
b1010110 H"
b1010110 ;$
b101100 G"
b110000 4
b110000 F"
b110000 x"
b110000 2$
b110000 ?$
b101100 ("
b101100 k"
b101100 y"
b101000 )"
b101000 p"
b101000 i$
x{
bx 7
bx c"
bx |"
bx r#
bx 0
bx d"
bx Z#
1y
b11111 5
b11111 "#
b11111 x#
b11111 e$
0\
0+
b1011 5"
13"
#105
03"
