$date
	Sun Jan 12 05:59:46 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cacheMicroTestbench $end
$var wire 1 ! zeroFlag $end
$var wire 32 " writeBackData [31:0] $end
$var wire 2 # state [1:0] $end
$var wire 32 $ signExtenderOutputData [31:0] $end
$var wire 32 % selectedPC [31:0] $end
$var wire 32 & selectedOp2 [31:0] $end
$var wire 1 ' sb_ID_EX_out $end
$var wire 1 ( sb_EX_MEM_out $end
$var wire 1 ) sb $end
$var wire 5 * rs2_ID_EX_out [4:0] $end
$var wire 5 + rs1_ID_EX_out [4:0] $end
$var wire 1 , regWrite_MEM_WB_out $end
$var wire 1 - regWrite_ID_EX_out $end
$var wire 1 . regWrite_EX_MEM_out $end
$var wire 1 / regWrite $end
$var wire 32 0 readData2_ID_EX_out [31:0] $end
$var wire 32 1 readData2_EX_MEM_out [31:0] $end
$var wire 32 2 readData2 [31:0] $end
$var wire 32 3 readData1_ID_EX_out [31:0] $end
$var wire 32 4 readData1 [31:0] $end
$var wire 32 5 readAddress [31:0] $end
$var wire 5 6 rd_MEM_WB_out [4:0] $end
$var wire 5 7 rd_ID_EX_out [4:0] $end
$var wire 5 8 rd_EX_MEM_out [4:0] $end
$var wire 32 9 r9 [31:0] $end
$var wire 32 : r8 [31:0] $end
$var wire 32 ; r7 [31:0] $end
$var wire 32 < r6 [31:0] $end
$var wire 32 = r5 [31:0] $end
$var wire 32 > r4 [31:0] $end
$var wire 32 ? r32 [31:0] $end
$var wire 32 @ r31 [31:0] $end
$var wire 32 A r30 [31:0] $end
$var wire 32 B r3 [31:0] $end
$var wire 32 C r29 [31:0] $end
$var wire 32 D r28 [31:0] $end
$var wire 32 E r27 [31:0] $end
$var wire 32 F r26 [31:0] $end
$var wire 32 G r25 [31:0] $end
$var wire 32 H r24 [31:0] $end
$var wire 32 I r23 [31:0] $end
$var wire 32 J r22 [31:0] $end
$var wire 32 K r21 [31:0] $end
$var wire 32 L r20 [31:0] $end
$var wire 32 M r2 [31:0] $end
$var wire 32 N r19 [31:0] $end
$var wire 32 O r18 [31:0] $end
$var wire 32 P r17 [31:0] $end
$var wire 32 Q r16 [31:0] $end
$var wire 32 R r15 [31:0] $end
$var wire 32 S r14 [31:0] $end
$var wire 32 T r13 [31:0] $end
$var wire 32 U r12 [31:0] $end
$var wire 32 V r11 [31:0] $end
$var wire 32 W r10 [31:0] $end
$var wire 32 X r1 [31:0] $end
$var wire 1 Y predicted $end
$var wire 32 Z pcPlus4 [31:0] $end
$var wire 32 [ pcBranched [31:0] $end
$var wire 32 \ pcBranchOperand [31:0] $end
$var wire 1 ] nop $end
$var wire 1 ^ memtoReg_MEM_WB_out $end
$var wire 1 _ memtoReg_ID_EX_out $end
$var wire 1 ` memtoReg_EX_MEM_out $end
$var wire 1 a memtoReg $end
$var wire 1 b memWrite_ID_EX_out $end
$var wire 1 c memWrite_EX_MEM_out $end
$var wire 1 d memWrite $end
$var wire 32 e m8 [31:0] $end
$var wire 32 f m4 [31:0] $end
$var wire 32 g m36 [31:0] $end
$var wire 32 h m32 [31:0] $end
$var wire 32 i m28 [31:0] $end
$var wire 32 j m24 [31:0] $end
$var wire 32 k m20 [31:0] $end
$var wire 32 l m16 [31:0] $end
$var wire 32 m m12 [31:0] $end
$var wire 32 n m0 [31:0] $end
$var wire 1 o lh_MEM_WB_out $end
$var wire 1 p lh_ID_EX_out $end
$var wire 1 q lh_EX_MEM_out $end
$var wire 1 r lh $end
$var wire 1 s ld_ID_EX_out $end
$var wire 1 t ld_EX_MEM_out $end
$var wire 1 u ld $end
$var wire 1 v jalr $end
$var wire 32 w instruction_IF_ID_out [31:0] $end
$var wire 32 x instruction [31:0] $end
$var wire 32 y immediate_ID_EX_out [31:0] $end
$var wire 32 z immediate [31:0] $end
$var wire 1 { halt_MEM_WB_out $end
$var wire 1 | halt_ID_EX_out $end
$var wire 1 } halt_EX_MEM_out $end
$var wire 1 ~ halt $end
$var wire 32 !" forwardedOp2 [31:0] $end
$var wire 32 "" forwardedOp1 [31:0] $end
$var wire 2 #" forwardOp2 [1:0] $end
$var wire 2 $" forwardOp1 [1:0] $end
$var wire 32 %" data_MEM_WB_out [31:0] $end
$var wire 32 &" data [31:0] $end
$var wire 32 '" c9 [31:0] $end
$var wire 32 (" c8 [31:0] $end
$var wire 32 )" c7 [31:0] $end
$var wire 32 *" c6 [31:0] $end
$var wire 32 +" c5 [31:0] $end
$var wire 32 ," c4 [31:0] $end
$var wire 32 -" c3 [31:0] $end
$var wire 32 ." c2 [31:0] $end
$var wire 32 /" c15 [31:0] $end
$var wire 32 0" c14 [31:0] $end
$var wire 32 1" c13 [31:0] $end
$var wire 32 2" c12 [31:0] $end
$var wire 32 3" c11 [31:0] $end
$var wire 32 4" c10 [31:0] $end
$var wire 32 5" c1 [31:0] $end
$var wire 32 6" c0 [31:0] $end
$var wire 32 7" branchUnitOperand2 [31:0] $end
$var wire 32 8" branchUnitOperand1 [31:0] $end
$var wire 1 9" PCsrc $end
$var wire 32 :" PC_IF_ID_out [31:0] $end
$var wire 32 ;" PC_ID_EX_out [31:0] $end
$var wire 2 <" ID_forwardOp2 [1:0] $end
$var wire 2 =" ID_forwardOp1 [1:0] $end
$var wire 2 >" ALUsrc_ID_EX_out [1:0] $end
$var wire 2 ?" ALUsrc [1:0] $end
$var wire 32 @" ALUresult_MEM_WB_out [31:0] $end
$var wire 32 A" ALUresult_EX_MEM_out [31:0] $end
$var wire 32 B" ALUresult [31:0] $end
$var wire 4 C" ALUop_ID_EX_out [3:0] $end
$var wire 4 D" ALUop [3:0] $end
$var reg 1 E" clock $end
$var reg 1 F" reset $end
$var integer 32 G" cycles [31:0] $end
$scope module ALUDUT $end
$var wire 4 H" operation [3:0] $end
$var wire 32 I" operand2 [31:0] $end
$var wire 32 J" operand1 [31:0] $end
$var parameter 4 K" addop $end
$var parameter 4 L" andop $end
$var parameter 4 M" jalop $end
$var parameter 4 N" luiop $end
$var parameter 4 O" orop $end
$var parameter 4 P" sllop $end
$var parameter 4 Q" sltop $end
$var parameter 4 R" srlop $end
$var parameter 4 S" subop $end
$var parameter 4 T" xorop $end
$var reg 32 U" result [31:0] $end
$var reg 1 ! zeroFlag $end
$upscope $end
$scope module add4Adder $end
$var wire 32 V" operand2 [31:0] $end
$var wire 32 W" sum [31:0] $end
$var wire 32 X" operand1 [31:0] $end
$upscope $end
$scope module branchAdder $end
$var wire 32 Y" operand1 [31:0] $end
$var wire 32 Z" sum [31:0] $end
$var wire 32 [" operand2 [31:0] $end
$upscope $end
$scope module branchUnit $end
$var wire 1 E" clock $end
$var wire 3 \" funct3 [2:0] $end
$var wire 7 ]" opCode [6:0] $end
$var wire 1 F" reset $end
$var wire 2 ^" state [1:0] $end
$var wire 1 Y predicted $end
$var wire 32 _" operand2 [31:0] $end
$var wire 32 `" operand1 [31:0] $end
$var wire 1 ] nop $end
$var parameter 7 a" bOp $end
$var parameter 3 b" beqf3 $end
$var parameter 3 c" bnef3 $end
$var parameter 7 d" jalOp $end
$var parameter 7 e" jalrOp $end
$var reg 1 9" PCsrc $end
$scope module b1 $end
$var wire 1 9" PCsrc $end
$var wire 7 f" opCode [6:0] $end
$var wire 1 F" reset $end
$var parameter 7 g" bOp $end
$var parameter 7 h" jalOp $end
$var parameter 7 i" jalrOp $end
$var reg 1 Y predicted $end
$var reg 2 j" state [1:0] $end
$upscope $end
$upscope $end
$scope module branchUnitOp1Mux $end
$var wire 32 k" i3 [31:0] $end
$var wire 2 l" select [1:0] $end
$var wire 32 m" i2 [31:0] $end
$var wire 32 n" i1 [31:0] $end
$var wire 32 o" i0 [31:0] $end
$var reg 32 p" out [31:0] $end
$upscope $end
$scope module branchUnitOp2Mux $end
$var wire 32 q" i3 [31:0] $end
$var wire 2 r" select [1:0] $end
$var wire 32 s" i2 [31:0] $end
$var wire 32 t" i1 [31:0] $end
$var wire 32 u" i0 [31:0] $end
$var reg 32 v" out [31:0] $end
$upscope $end
$scope module bufferEX_MEM $end
$var wire 32 w" ALUresult_in [31:0] $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 1 ' sb_in $end
$var wire 1 - regWrite_in $end
$var wire 32 x" readData2_in [31:0] $end
$var wire 5 y" rd_in [4:0] $end
$var wire 1 _ memtoReg_in $end
$var wire 1 b memWrite_in $end
$var wire 1 p lh_in $end
$var wire 1 s ld_in $end
$var wire 1 | halt_in $end
$var reg 32 z" ALUresult [31:0] $end
$var reg 1 } halt $end
$var reg 1 t ld $end
$var reg 1 q lh $end
$var reg 1 c memWrite $end
$var reg 1 ` memtoReg $end
$var reg 5 {" rd [4:0] $end
$var reg 32 |" readData2 [31:0] $end
$var reg 1 . regWrite $end
$var reg 1 ( sb $end
$upscope $end
$scope module bufferID_EX $end
$var wire 1 E" clock $end
$var wire 5 }" rd_in [4:0] $end
$var wire 1 F" reset $end
$var wire 5 ~" rs1_in [4:0] $end
$var wire 5 !# rs2_in [4:0] $end
$var wire 1 ) sb_in $end
$var wire 1 / regWrite_in $end
$var wire 32 "# readData2_in [31:0] $end
$var wire 32 ## readData1_in [31:0] $end
$var wire 1 ] nop $end
$var wire 1 a memtoReg_in $end
$var wire 1 d memWrite_in $end
$var wire 1 r lh_in $end
$var wire 1 u ld_in $end
$var wire 32 $# immediate_in [31:0] $end
$var wire 1 ~ halt_in $end
$var wire 32 %# PC_in [31:0] $end
$var wire 2 &# ALUsrc_in [1:0] $end
$var wire 4 '# ALUop_in [3:0] $end
$var reg 4 (# ALUop [3:0] $end
$var reg 2 )# ALUsrc [1:0] $end
$var reg 32 *# PC [31:0] $end
$var reg 1 | halt $end
$var reg 32 +# immediate [31:0] $end
$var reg 1 s ld $end
$var reg 1 p lh $end
$var reg 1 b memWrite $end
$var reg 1 _ memtoReg $end
$var reg 5 ,# rd [4:0] $end
$var reg 32 -# readData1 [31:0] $end
$var reg 32 .# readData2 [31:0] $end
$var reg 1 - regWrite $end
$var reg 5 /# rs1 [4:0] $end
$var reg 5 0# rs2 [4:0] $end
$var reg 1 ' sb $end
$upscope $end
$scope module bufferIF_ID $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 1 v jalr $end
$var wire 32 1# instruction_in [31:0] $end
$var wire 32 2# PC_in [31:0] $end
$var reg 32 3# PC [31:0] $end
$var reg 32 4# instruction [31:0] $end
$upscope $end
$scope module bufferMEM_WB $end
$var wire 32 5# ALUresult_in [31:0] $end
$var wire 1 E" clock $end
$var wire 1 } halt_in $end
$var wire 1 q lh_in $end
$var wire 1 ` memtoReg_in $end
$var wire 5 6# rd_in [4:0] $end
$var wire 1 . regWrite_in $end
$var wire 1 F" reset $end
$var wire 32 7# data_in [31:0] $end
$var reg 32 8# ALUresult [31:0] $end
$var reg 32 9# data [31:0] $end
$var reg 1 { halt $end
$var reg 1 o lh $end
$var reg 1 ^ memtoReg $end
$var reg 5 :# rd [4:0] $end
$var reg 1 , regWrite $end
$upscope $end
$scope module controlUnit $end
$var wire 3 ;# funct3 [2:0] $end
$var wire 7 <# funct7 [6:0] $end
$var wire 7 =# opCode [6:0] $end
$var wire 1 ] nop $end
$var wire 1 ~ halt $end
$var parameter 7 ># Rtype $end
$var parameter 7 ?# addiwOp $end
$var parameter 3 @# addiwf3 $end
$var parameter 4 A# addop $end
$var parameter 3 B# addwf3 $end
$var parameter 7 C# addwf7 $end
$var parameter 3 D# andf3 $end
$var parameter 7 E# andf7 $end
$var parameter 7 F# andiOp $end
$var parameter 3 G# andif3 $end
$var parameter 4 H# andop $end
$var parameter 7 I# beqOp $end
$var parameter 3 J# beqf3 $end
$var parameter 7 K# bneOp $end
$var parameter 3 L# bnef3 $end
$var parameter 7 M# jalOp $end
$var parameter 4 N# jalop $end
$var parameter 7 O# jalrOp $end
$var parameter 3 P# jalrf3 $end
$var parameter 7 Q# lhOp $end
$var parameter 3 R# lhf3 $end
$var parameter 7 S# luiOp $end
$var parameter 4 T# luiop $end
$var parameter 7 U# lwOp $end
$var parameter 3 V# lwf3 $end
$var parameter 3 W# orf3 $end
$var parameter 7 X# orf7 $end
$var parameter 7 Y# oriOp $end
$var parameter 3 Z# orif3 $end
$var parameter 4 [# orop $end
$var parameter 7 \# sbOp $end
$var parameter 3 ]# sbf3 $end
$var parameter 3 ^# sllf3 $end
$var parameter 7 _# sllf7 $end
$var parameter 4 `# sllop $end
$var parameter 3 a# sltf3 $end
$var parameter 7 b# sltf7 $end
$var parameter 4 c# sltop $end
$var parameter 3 d# srlf3 $end
$var parameter 7 e# srlf7 $end
$var parameter 4 f# srlop $end
$var parameter 3 g# subf3 $end
$var parameter 7 h# subf7 $end
$var parameter 4 i# subop $end
$var parameter 7 j# swOp $end
$var parameter 3 k# swf3 $end
$var parameter 3 l# xorf3 $end
$var parameter 7 m# xorf7 $end
$var parameter 4 n# xorop $end
$var reg 4 o# ALUop [3:0] $end
$var reg 2 p# ALUsrc [1:0] $end
$var reg 1 v jalr $end
$var reg 1 u ld $end
$var reg 1 r lh $end
$var reg 1 d memWrite $end
$var reg 1 a memtoReg $end
$var reg 1 / regWrite $end
$var reg 1 ) sb $end
$upscope $end
$scope module dataCache $end
$var wire 32 q# address [31:0] $end
$var wire 32 r# c0 [31:0] $end
$var wire 32 s# c1 [31:0] $end
$var wire 32 t# c10 [31:0] $end
$var wire 32 u# c11 [31:0] $end
$var wire 32 v# c12 [31:0] $end
$var wire 32 w# c13 [31:0] $end
$var wire 32 x# c14 [31:0] $end
$var wire 32 y# c15 [31:0] $end
$var wire 32 z# c2 [31:0] $end
$var wire 32 {# c3 [31:0] $end
$var wire 32 |# c4 [31:0] $end
$var wire 32 }# c5 [31:0] $end
$var wire 32 ~# c6 [31:0] $end
$var wire 32 !$ c7 [31:0] $end
$var wire 32 "$ c8 [31:0] $end
$var wire 32 #$ c9 [31:0] $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 1 ( sb $end
$var wire 32 $$ writeData [31:0] $end
$var wire 1 c writeEnable $end
$var wire 4 %$ word_offset [3:0] $end
$var wire 22 &$ tag [21:0] $end
$var wire 32 '$ m8 [31:0] $end
$var wire 32 ($ m4 [31:0] $end
$var wire 32 )$ m36 [31:0] $end
$var wire 32 *$ m32 [31:0] $end
$var wire 32 +$ m28 [31:0] $end
$var wire 32 ,$ m24 [31:0] $end
$var wire 32 -$ m20 [31:0] $end
$var wire 32 .$ m16 [31:0] $end
$var wire 32 /$ m12 [31:0] $end
$var wire 32 0$ m0 [31:0] $end
$var wire 4 1$ index [3:0] $end
$var wire 2 2$ byte_offset [1:0] $end
$var reg 32 3$ data [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 4$ i [31:0] $end
$upscope $end
$upscope $end
$scope module forwardALUOp1 $end
$var wire 32 5$ i0 [31:0] $end
$var wire 32 6$ i1 [31:0] $end
$var wire 32 7$ i3 [31:0] $end
$var wire 2 8$ select [1:0] $end
$var wire 32 9$ i2 [31:0] $end
$var reg 32 :$ out [31:0] $end
$upscope $end
$scope module forwardALUOp2 $end
$var wire 32 ;$ i0 [31:0] $end
$var wire 32 <$ i1 [31:0] $end
$var wire 32 =$ i3 [31:0] $end
$var wire 2 >$ select [1:0] $end
$var wire 32 ?$ i2 [31:0] $end
$var reg 32 @$ out [31:0] $end
$upscope $end
$scope module fwUnit $end
$var wire 5 A$ EX_MEM_rd [4:0] $end
$var wire 5 B$ ID_EX_rd [4:0] $end
$var wire 5 C$ ID_EX_rs1 [4:0] $end
$var wire 5 D$ ID_EX_rs2 [4:0] $end
$var wire 5 E$ IF_ID_rs1 [4:0] $end
$var wire 5 F$ IF_ID_rs2 [4:0] $end
$var wire 5 G$ MEM_WB_rd [4:0] $end
$var wire 2 H$ branch [1:0] $end
$var wire 1 E" clock $end
$var wire 1 I$ load_EX_MEM $end
$var wire 1 s load_ID_EX $end
$var wire 7 J$ opCode [6:0] $end
$var wire 1 . regWrite_EX_MEM $end
$var wire 1 - regWrite_ID_EX $end
$var wire 1 , regWrite_MEM_WB $end
$var wire 1 F" reset $end
$var parameter 7 K$ bOp $end
$var parameter 7 L$ jalrOp $end
$var reg 2 M$ ID_forwardOp1 [1:0] $end
$var reg 2 N$ ID_forwardOp2 [1:0] $end
$var reg 2 O$ forwardOp1 [1:0] $end
$var reg 2 P$ forwardOp2 [1:0] $end
$var reg 1 ] nop $end
$upscope $end
$scope module immediateGen $end
$var wire 32 Q$ instruction [31:0] $end
$var parameter 7 R$ addiwOp $end
$var parameter 7 S$ andiOp $end
$var parameter 7 T$ beqOp $end
$var parameter 7 U$ bneOp $end
$var parameter 7 V$ jalOp $end
$var parameter 7 W$ jalrOp $end
$var parameter 7 X$ lhOp $end
$var parameter 7 Y$ luiOp $end
$var parameter 7 Z$ lwOp $end
$var parameter 7 [$ oriOp $end
$var parameter 7 \$ sbOp $end
$var parameter 7 ]$ swOp $end
$var reg 32 ^$ out [31:0] $end
$upscope $end
$scope module instMem $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 4 _$ word_offset [3:0] $end
$var wire 22 `$ tag [21:0] $end
$var wire 32 a$ instructionAddress [31:0] $end
$var wire 6 b$ index [5:0] $end
$var wire 2 c$ byte_offset [1:0] $end
$var reg 32 d$ instruction [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 e$ i [31:0] $end
$upscope $end
$upscope $end
$scope module memtoRegMux $end
$var wire 32 f$ i1 [31:0] $end
$var wire 1 ^ select $end
$var wire 32 g$ i0 [31:0] $end
$var reg 32 h$ out [31:0] $end
$upscope $end
$scope module pcBranchAdderMux $end
$var wire 32 i$ i0 [31:0] $end
$var wire 32 j$ i1 [31:0] $end
$var wire 1 v select $end
$var reg 32 k$ out [31:0] $end
$upscope $end
$scope module pcMux $end
$var wire 32 l$ i0 [31:0] $end
$var wire 32 m$ i1 [31:0] $end
$var wire 1 9" select $end
$var reg 32 n$ out [31:0] $end
$upscope $end
$scope module programCounter $end
$var wire 1 9" branch $end
$var wire 1 E" clock $end
$var wire 32 o$ immediate [31:0] $end
$var wire 32 p$ nextAddress [31:0] $end
$var wire 1 ] nop $end
$var wire 1 F" reset $end
$var reg 32 q$ readAddress [31:0] $end
$upscope $end
$scope module registerFile $end
$var wire 1 E" clock $end
$var wire 32 r$ r1 [31:0] $end
$var wire 32 s$ r10 [31:0] $end
$var wire 32 t$ r11 [31:0] $end
$var wire 32 u$ r12 [31:0] $end
$var wire 32 v$ r13 [31:0] $end
$var wire 32 w$ r14 [31:0] $end
$var wire 32 x$ r15 [31:0] $end
$var wire 32 y$ r16 [31:0] $end
$var wire 32 z$ r17 [31:0] $end
$var wire 32 {$ r18 [31:0] $end
$var wire 32 |$ r19 [31:0] $end
$var wire 32 }$ r2 [31:0] $end
$var wire 32 ~$ r20 [31:0] $end
$var wire 32 !% r21 [31:0] $end
$var wire 32 "% r22 [31:0] $end
$var wire 32 #% r23 [31:0] $end
$var wire 32 $% r24 [31:0] $end
$var wire 32 %% r25 [31:0] $end
$var wire 32 &% r26 [31:0] $end
$var wire 32 '% r27 [31:0] $end
$var wire 32 (% r28 [31:0] $end
$var wire 32 )% r29 [31:0] $end
$var wire 32 *% r3 [31:0] $end
$var wire 32 +% r30 [31:0] $end
$var wire 32 ,% r31 [31:0] $end
$var wire 32 -% r32 [31:0] $end
$var wire 32 .% r4 [31:0] $end
$var wire 32 /% r5 [31:0] $end
$var wire 32 0% r6 [31:0] $end
$var wire 32 1% r7 [31:0] $end
$var wire 32 2% r8 [31:0] $end
$var wire 32 3% r9 [31:0] $end
$var wire 32 4% readData1 [31:0] $end
$var wire 32 5% readData2 [31:0] $end
$var wire 5 6% readReg1 [4:0] $end
$var wire 5 7% readReg2 [4:0] $end
$var wire 1 , regWrite $end
$var wire 1 F" reset $end
$var wire 32 8% writeData [31:0] $end
$var wire 5 9% writeReg [4:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 :% i [31:0] $end
$upscope $end
$upscope $end
$scope module selectALUOp2 $end
$var wire 32 ;% i0 [31:0] $end
$var wire 32 <% i1 [31:0] $end
$var wire 32 =% i2 [31:0] $end
$var wire 32 >% i3 [31:0] $end
$var wire 2 ?% select [1:0] $end
$var reg 32 @% out [31:0] $end
$upscope $end
$scope module signExtenderDUT $end
$var wire 32 A% inputData [31:0] $end
$var wire 1 o lh $end
$var wire 32 B% outputData [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 ]$
b100011 \$
b10011 [$
b11 Z$
b111000 Y$
b11 X$
b1100111 W$
b1101111 V$
b1100011 U$
b1100011 T$
b11011 S$
b10011 R$
b1100111 L$
b1100011 K$
b111 n#
b0 m#
b11 l#
b10 k#
b100011 j#
b10 i#
b0 h#
b110 g#
b110 f#
b0 e#
b10 d#
b1000 c#
b0 b#
b0 a#
b101 `#
b0 _#
b100 ^#
b0 ]#
b100011 \#
b100 [#
b111 Z#
b10011 Y#
b0 X#
b101 W#
b0 V#
b11 U#
b1010 T#
b111000 S#
b10 R#
b11 Q#
b0 P#
b1100111 O#
b1001 N#
b1101111 M#
b1 L#
b1100011 K#
b0 J#
b1100011 I#
b11 H#
b110 G#
b11011 F#
b0 E#
b111 D#
b100000 C#
b1 B#
b1 A#
b0 @#
b10011 ?#
b110011 >#
b1100111 i"
b1101111 h"
b1100011 g"
b1100111 e"
b1101111 d"
b1 c"
b0 b"
b1100011 a"
b111 T"
b10 S"
b110 R"
b1000 Q"
b101 P"
b100 O"
b1010 N"
b1001 M"
b11 L"
b1 K"
$end
#0
$dumpvars
bx B%
bx A%
bx @%
bx ?%
bz >%
bx =%
bx <%
bx ;%
bx :%
bx 9%
bx 8%
bx 7%
bx 6%
bx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
bx ,%
bx +%
bx *%
bx )%
bx (%
bx '%
bx &%
bx %%
bx $%
bx #%
bx "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
bx y$
bx x$
bx w$
bx v$
bx u$
bx t$
bx s$
bx r$
bx q$
bx p$
bx o$
bx n$
bx m$
bx l$
bx k$
bx j$
bx i$
bx h$
bx g$
bx f$
bx e$
bx d$
bx c$
bx b$
bx a$
b0xxxxxxxxxxxxxxxxxxxx `$
bx _$
bx ^$
bx Q$
b0 P$
b0 O$
b0 N$
b0 M$
bx J$
zI$
bz H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
b0 >$
bz =$
bx <$
bx ;$
bx :$
bx 9$
b0 8$
bz 7$
bx 6$
bx 5$
bx 4$
bx 3$
bx 2$
bx 1$
b0 0$
b0 /$
b0 .$
b0 -$
b0 ,$
b0 +$
b0 *$
b0 )$
b1101110011000000101110101010 ($
b0 '$
bx &$
bx %$
bx $$
bx #$
bx "$
bx !$
bx ~#
bx }#
bx |#
bx {#
bx z#
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
b0 p#
b0 o#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
b0 '#
b0 &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
b0 r"
bz q"
bx p"
bx o"
bx n"
bx m"
b0 l"
bz k"
bx j"
bx f"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
b100 V"
bx U"
bx J"
bx I"
bx H"
b1 G"
0F"
0E"
b0 D"
bx C"
bx B"
bx A"
bx @"
b0 ?"
bx >"
b0 ="
b0 <"
bx ;"
bx :"
09"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
b0 $"
b0 #"
bx ""
bx !"
x~
x}
x|
x{
bx z
bx y
bx x
bx w
0v
0u
xt
xs
0r
xq
xp
xo
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b1101110011000000101110101010 f
b0 e
0d
xc
xb
0a
x`
x_
x^
0]
bx \
bx [
bx Z
0Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
0/
x.
x-
x,
bx +
bx *
0)
x(
x'
bx &
bx %
bx $
bx #
bx "
x!
$end
#1
b0 &
b0 I"
b0 @%
b0 7"
b0 _"
b0 v"
b0 8"
b0 `"
b0 p"
b0 j$
b0 "
b0 m"
b0 s"
b0 9$
b0 ?$
b0 h$
b0 8%
b100 %
b100 n$
b100 p$
1!
b0 ""
b0 J"
b0 :$
b0 !"
b0 x"
b0 @$
b0 ;%
0~
b0 c$
b0 _$
b0 b$
b0 `$
b0 !#
b0 ~"
b0 }"
b0 F$
b0 E$
b0 J$
b0 \"
b0 ]"
b0 f"
b0 2
b0 u"
b0 "#
b0 5%
b0 7%
b0 4
b0 o"
b0 ##
b0 4%
b0 6%
b0 <#
b0 ;#
b0 =#
b0 &$
b0 1$
b0 %$
b0 2$
b0 $
b0 g$
b0 B%
b0 #
b0 ^"
b0 j"
b100 Z
b100 W"
b100 l$
b11111111111111111111111111111100 Y"
b0 5
b0 X"
b0 2#
b0 a$
b0 q$
b0 w
b0 4#
b0 Q$
b0 :"
b0 %#
b0 3#
0|
0s
b0 *
b0 0#
b0 D$
b0 +
b0 /#
b0 C$
b0 7
b0 y"
b0 ,#
b0 B$
b0 y
b0 +#
b0 <%
b0 0
b0 .#
b0 ;$
b0 3
b0 -#
b0 5$
b0 ;"
b0 *#
b0 =%
b0 C"
b0 H"
b0 (#
b0 >"
b0 )#
b0 ?%
0p
0'
0b
0_
0-
0}
b0 8
b0 {"
b0 6#
b0 A$
b0 A"
b0 n"
b0 t"
b0 z"
b0 5#
b0 q#
b0 6$
b0 <$
b0 1
b0 |"
b0 $$
0t
0q
0(
0c
0`
0.
0{
b0 6
b0 :#
b0 G$
b0 9%
b0 @"
b0 8#
b0 f$
b0 %"
b0 9#
b0 A%
0o
0^
0,
b0 ?
b0 -%
b0 @
b0 ,%
b0 A
b0 +%
b0 C
b0 )%
b0 D
b0 (%
b0 E
b0 '%
b0 F
b0 &%
b0 G
b0 %%
b0 H
b0 $%
b0 I
b0 #%
b0 J
b0 "%
b0 K
b0 !%
b0 L
b0 ~$
b0 N
b0 |$
b0 O
b0 {$
b0 P
b0 z$
b0 Q
b0 y$
b0 R
b0 x$
b0 S
b0 w$
b0 T
b0 v$
b0 U
b0 u$
b0 V
b0 t$
b0 W
b0 s$
b0 9
b0 3%
b0 :
b0 2%
b0 ;
b0 1%
b0 <
b0 0%
b0 =
b0 /%
b0 >
b0 .%
b0 B
b0 *%
b0 M
b0 }$
b0 X
b0 r$
b10000 4$
b1000000 e$
b100000 :%
1F"
#5
0F"
#10
b100 [
b100 Z"
b100 m$
b100 \
b100 ["
b100 k$
b1 ?"
b1 &#
b1 p#
b1 D"
b1 '#
b1 o#
1a
1/
b100 z
b100 $#
b100 ^$
b100 i$
b100 o$
b1000 %
b1000 n$
b1000 p$
bx &$
bx 1$
bx %$
bx 2$
b100 !#
b1 }"
b100 F$
b10011 J$
b10011 ]"
b10011 f"
b100 7%
b10011 =#
b1 _$
bx A"
bx n"
bx t"
bx z"
bx 5#
bx q#
bx 6$
bx <$
bx y
bx +#
bx <%
b10000000000000010010011 w
b10000000000000010010011 4#
b10000000000000010010011 Q$
b1000 Z
b1000 W"
b1000 l$
b0 Y"
b100 5
b100 X"
b100 2#
b100 a$
b100 q$
b0 &"
b0 7#
b0 3$
b0 '"
b0 #$
b0 ("
b0 "$
b0 )"
b0 !$
b0 *"
b0 ~#
b0 +"
b0 }#
b0 ,"
b0 |#
b0 -"
b0 {#
b0 ."
b0 z#
b1101110011000000101110101010 5"
b1101110011000000101110101010 s#
b0 6"
b0 r#
b10000000000000010010011 x
b10000000000000010010011 1#
b10000000000000010010011 d$
b10 G"
1E"
#15
bx &"
bx 7#
bx 3$
b1010000110000011 x
b1010000110000011 1#
b1010000110000011 d$
0E"
#20
b0 \
b0 ["
b0 k$
1r
1u
b1 D"
b1 '#
b1 o#
b1 ?"
b1 &#
b1 p#
0a
1/
b1100 %
b1100 n$
b1100 p$
b0 z
b0 $#
b0 ^$
b0 i$
b0 o$
b100 B"
b100 U"
b100 w"
0!
b100 &
b100 I"
b100 @%
bx "
bx m"
bx s"
bx 9$
bx ?$
bx h$
bx 8%
b10 _$
b0 !#
b1 ~"
b11 }"
b0 F$
b1 E$
b11 J$
b10 \"
b11 ]"
b11 f"
b0 7%
b1 6%
b10 ;#
b11 =#
bx $
bx g$
bx B%
b1100 Z
b1100 W"
b1100 l$
b100 [
b100 Z"
b100 m$
b100 Y"
b1000 5
b1000 X"
b1000 2#
b1000 a$
b1000 q$
b1010000110000011 w
b1010000110000011 4#
b1010000110000011 Q$
b100 :"
b100 %#
b100 3#
b100 *
b100 0#
b100 D$
b1 7
b1 y"
b1 ,#
b1 B$
b100 y
b100 +#
b100 <%
b1 C"
b1 H"
b1 (#
b1 >"
b1 )#
b1 ?%
1_
1-
bx @"
bx 8#
bx f$
bx %"
bx 9#
bx A%
b11 G"
1E"
#25
b10010000000000001010010011 x
b10010000000000001010010011 1#
b10010000000000001010010011 d$
0E"
#30
b100 ""
b100 J"
b100 :$
0!
b100 B"
b100 U"
b100 w"
b100100 \
b100100 ["
b100100 k$
1a
0u
0r
b1 D"
b1 '#
b1 o#
b1 ?"
b1 &#
b1 p#
1/
b1 $"
b1 8$
b1 O$
b0 &
b0 I"
b0 @%
b100100 z
b100100 $#
b100100 ^$
b100100 i$
b100100 o$
b10000 %
b10000 n$
b10000 p$
b0 &$
b0 1$
b1 %$
b0 2$
b100 !#
b0 ~"
b101 }"
b100 F$
b0 E$
b10011 J$
b0 \"
b10011 ]"
b10011 f"
b100 7%
b0 6%
b1 <#
b0 ;#
b10011 =#
b11 _$
b1 8
b1 {"
b1 6#
b1 A$
b100 A"
b100 n"
b100 t"
b100 z"
b100 5#
b100 q#
b100 6$
b100 <$
1`
1.
1s
b0 *
b0 0#
b0 D$
b1 +
b1 /#
b1 C$
b11 7
b11 y"
b11 ,#
b11 B$
b0 y
b0 +#
b0 <%
b100 ;"
b100 *#
b100 =%
1p
0_
b10010000000000001010010011 w
b10010000000000001010010011 4#
b10010000000000001010010011 Q$
b1000 :"
b1000 %#
b1000 3#
b10000 Z
b10000 W"
b10000 l$
b101100 [
b101100 Z"
b101100 m$
b1000 Y"
b1100 5
b1100 X"
b1100 2#
b1100 a$
b1100 q$
b100 G"
1E"
#35
b1101110011000000101110101010 &"
b1101110011000000101110101010 7#
b1101110011000000101110101010 3$
b100101000000000100011 x
b100101000000000100011 1#
b100101000000000100011 d$
0E"
#40
b0 \
b0 ["
b0 k$
b100100 B"
b100100 U"
b100100 w"
b0 ""
b0 J"
b0 :$
b100 7"
b100 _"
b100 v"
1)
1d
b1 D"
b1 '#
b1 o#
b1 ?"
b1 &#
b1 p#
0a
0/
b10100 %
b10100 n$
b10100 p$
b0 z
b0 $#
b0 ^$
b0 i$
b0 o$
b100100 &
b100100 I"
b100100 @%
b100 "
b100 m"
b100 s"
b100 9$
b100 ?$
b100 h$
b100 8%
b0 $"
b0 8$
b0 O$
b100 2
b100 u"
b100 "#
b100 5%
b100 M
b100 }$
b100 _$
b1 !#
b101 ~"
b0 }"
b1 F$
b101 E$
b100011 J$
b100011 ]"
b100011 f"
b1 7%
b101 6%
b0 <#
b100011 =#
b1101110011000000101110101010 $
b1101110011000000101110101010 g$
b1101110011000000101110101010 B%
b10100 Z
b10100 W"
b10100 l$
b1100 [
b1100 Z"
b1100 m$
b1100 Y"
b10000 5
b10000 X"
b10000 2#
b10000 a$
b10000 q$
b100101000000000100011 w
b100101000000000100011 4#
b100101000000000100011 Q$
b1100 :"
b1100 %#
b1100 3#
0s
b100 *
b100 0#
b100 D$
b0 +
b0 /#
b0 C$
b101 7
b101 y"
b101 ,#
b101 B$
b100100 y
b100100 +#
b100100 <%
b1000 ;"
b1000 *#
b1000 =%
0p
1_
b11 8
b11 {"
b11 6#
b11 A$
1t
1q
0`
b1 6
b1 :#
b1 G$
b1 9%
b100 @"
b100 8#
b100 f$
b1101110011000000101110101010 %"
b1101110011000000101110101010 9#
b1101110011000000101110101010 A%
1^
1,
b101 G"
1E"
#45
b101000010100000011 x
b101000010100000011 1#
b101000010100000011 d$
0E"
#50
0!
b100100 B"
b100100 U"
b100100 w"
b100100 ""
b100100 J"
b100100 :$
1u
1/
0)
b1 D"
b1 '#
b1 o#
b1 ?"
b1 &#
b1 p#
0d
b101110101010 >
b101110101010 .%
b101110101010 "
b101110101010 m"
b101110101010 s"
b101110101010 9$
b101110101010 ?$
b101110101010 h$
b101110101010 8%
b0 7"
b0 _"
b0 v"
b100 !"
b100 x"
b100 @$
b100 ;%
b0 &
b0 I"
b0 @%
b1 $"
b1 8$
b1 O$
b11000 %
b11000 n$
b11000 p$
b101110101010 $
b101110101010 g$
b101110101010 B%
b1001 %$
b0 !#
b1010 }"
b0 F$
b11 J$
b11 ]"
b11 f"
b0 2
b0 u"
b0 "#
b0 5%
b0 7%
b11 =#
b101 _$
b11 6
b11 :#
b11 G$
b11 9%
1o
0^
b101 8
b101 {"
b101 6#
b101 A$
b100100 A"
b100100 n"
b100100 t"
b100100 z"
b100100 5#
b100100 q#
b100100 6$
b100100 <$
0t
0q
1`
b1 *
b1 0#
b1 D$
b101 +
b101 /#
b101 C$
b0 7
b0 y"
b0 ,#
b0 B$
b0 y
b0 +#
b0 <%
b100 0
b100 .#
b100 ;$
b1100 ;"
b1100 *#
b1100 =%
1'
1b
0_
0-
b101000010100000011 w
b101000010100000011 4#
b101000010100000011 Q$
b10000 :"
b10000 %#
b10000 3#
b11000 Z
b11000 W"
b11000 l$
b10000 [
b10000 Z"
b10000 m$
b10000 Y"
b10100 5
b10100 X"
b10100 2#
b10100 a$
b10100 q$
b110 G"
1E"
#55
b0 &"
b0 7#
b0 3$
b11111111111111111111111111111111 x
b11111111111111111111111111111111 1#
b11111111111111111111111111111111 d$
0E"
#60
0u
b0 D"
b0 '#
b0 o#
b0 ?"
b0 &#
b0 p#
0/
b11100 %
b11100 n$
b11100 p$
b0 !"
b0 x"
b0 @$
b0 ;%
b10 $"
b10 8$
b10 O$
b100100 <
b100100 0%
b100100 "
b100100 m"
b100100 s"
b100100 9$
b100100 ?$
b100100 h$
b100100 8%
1~
b110 _$
b11111 !#
b11111 ~"
b11111 }"
b11111 F$
b11111 E$
b1111111 J$
b111 \"
b1111111 ]"
b1111111 f"
b11111 7%
b11111 6%
b1111111 <#
b111 ;#
b1111111 =#
b0 $
b0 g$
b0 B%
b11100 Z
b11100 W"
b11100 l$
b10100 [
b10100 Z"
b10100 m$
b10100 Y"
b11000 5
b11000 X"
b11000 2#
b11000 a$
b11000 q$
b11111111111111111111111111111111 w
b11111111111111111111111111111111 4#
b11111111111111111111111111111111 Q$
b10100 :"
b10100 %#
b10100 3#
1s
b0 *
b0 0#
b0 D$
b1010 7
b1010 y"
b1010 ,#
b1010 B$
b0 0
b0 .#
b0 ;$
b10000 ;"
b10000 *#
b10000 =%
0'
0b
1-
b0 8
b0 {"
b0 6#
b0 A$
b100 1
b100 |"
b100 $$
1(
1c
0`
0.
b101 6
b101 :#
b101 G$
b101 9%
b100100 @"
b100100 8#
b100100 f$
b0 %"
b0 9#
b0 A%
0o
1^
b111 G"
1E"
#65
b100 '"
b100 #$
b100 g
b100 )$
bx x
bx 1#
bx d$
0E"
#70
1!
b0 ""
b0 J"
b0 :$
bx 7"
bx _"
bx v"
bx 8"
bx `"
bx p"
bx j$
b100 "
b100 m"
b100 s"
b100 9$
b100 ?$
b100 h$
b100 8%
b0 $"
b0 8$
b0 O$
b100000 %
b100000 n$
b100000 p$
x~
b100 $
b100 g$
b100 B%
bx !#
bx ~"
bx }"
bx F$
bx E$
bx J$
bx \"
bx ]"
bx f"
bx 2
bx u"
bx "#
bx 5%
bx 7%
bx 4
bx o"
bx ##
bx 4%
bx 6%
bx <#
bx ;#
bx =#
b111 _$
b0 6
b0 :#
b0 G$
b0 9%
b100 %"
b100 9#
b100 A%
0^
0,
b1010 8
b1010 {"
b1010 6#
b1010 A$
b0 1
b0 |"
b0 $$
1t
0(
0c
1.
1|
0s
b11111 *
b11111 0#
b11111 D$
b11111 +
b11111 /#
b11111 C$
b11111 7
b11111 y"
b11111 ,#
b11111 B$
b10100 ;"
b10100 *#
b10100 =%
b0 C"
b0 H"
b0 (#
b0 >"
b0 )#
b0 ?%
0-
bx w
bx 4#
bx Q$
b11000 :"
b11000 %#
b11000 3#
b100000 Z
b100000 W"
b100000 l$
b11000 [
b11000 Z"
b11000 m$
b11000 Y"
b11100 5
b11100 X"
b11100 2#
b11100 a$
b11100 q$
b100 &"
b100 7#
b100 3$
b1000 G"
1E"
#75
0E"
#80
bx &
bx I"
bx @%
x!
b100100 %
b100100 n$
b100100 p$
bx !"
bx x"
bx @$
bx ;%
bx ""
bx J"
bx :$
b100 V
b100 t$
b1000 _$
b100100 Z
b100100 W"
b100100 l$
b11100 [
b11100 Z"
b11100 m$
b11100 Y"
b100000 5
b100000 X"
b100000 2#
b100000 a$
b100000 q$
b11100 :"
b11100 %#
b11100 3#
x|
bx *
bx 0#
bx D$
bx +
bx /#
bx C$
bx 7
bx y"
bx ,#
bx B$
bx 0
bx .#
bx ;$
bx 3
bx -#
bx 5$
b11000 ;"
b11000 *#
b11000 =%
1}
b11111 8
b11111 {"
b11111 6#
b11111 A$
0t
0.
b1010 6
b1010 :#
b1010 G$
b1010 9%
1,
b1001 G"
1E"
#85
0E"
#90
b101000 %
b101000 n$
b101000 p$
b1001 _$
1{
b11111 6
b11111 :#
b11111 G$
b11111 9%
0,
x}
bx 8
bx {"
bx 6#
bx A$
bx 1
bx |"
bx $$
b11100 ;"
b11100 *#
b11100 =%
b100000 :"
b100000 %#
b100000 3#
b101000 Z
b101000 W"
b101000 l$
b100000 [
b100000 Z"
b100000 m$
b100000 Y"
b100100 5
b100100 X"
b100100 2#
b100100 a$
b100100 q$
b1010 G"
1E"
#95
0E"
#100
b101100 %
b101100 n$
b101100 p$
b1010 _$
b101100 Z
b101100 W"
b101100 l$
b100100 [
b100100 Z"
b100100 m$
b100100 Y"
b101000 5
b101000 X"
b101000 2#
b101000 a$
b101000 q$
b100100 :"
b100100 %#
b100100 3#
b100000 ;"
b100000 *#
b100000 =%
x{
bx 6
bx :#
bx G$
bx 9%
1E"
