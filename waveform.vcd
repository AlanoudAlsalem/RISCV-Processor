$date
	Sun Jan 12 06:30:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cacheMicroTestbench $end
$var wire 1 ! zeroFlag $end
$var wire 32 " writeBackData [31:0] $end
$var wire 2 # state [1:0] $end
$var wire 32 $ signExtenderOutputData [31:0] $end
$var wire 32 % selectedPC [31:0] $end
$var wire 32 & selectedOp2 [31:0] $end
$var wire 1 ' sb_ID_EX_out $end
$var wire 1 ( sb_EX_MEM_out $end
$var wire 1 ) sb $end
$var wire 5 * rs2_ID_EX_out [4:0] $end
$var wire 5 + rs1_ID_EX_out [4:0] $end
$var wire 1 , regWrite_MEM_WB_out $end
$var wire 1 - regWrite_ID_EX_out $end
$var wire 1 . regWrite_EX_MEM_out $end
$var wire 1 / regWrite $end
$var wire 32 0 readData2_ID_EX_out [31:0] $end
$var wire 32 1 readData2_EX_MEM_out [31:0] $end
$var wire 32 2 readData2 [31:0] $end
$var wire 32 3 readData1_ID_EX_out [31:0] $end
$var wire 32 4 readData1 [31:0] $end
$var wire 32 5 readAddress [31:0] $end
$var wire 5 6 rd_MEM_WB_out [4:0] $end
$var wire 5 7 rd_ID_EX_out [4:0] $end
$var wire 5 8 rd_EX_MEM_out [4:0] $end
$var wire 32 9 r9 [31:0] $end
$var wire 32 : r8 [31:0] $end
$var wire 32 ; r7 [31:0] $end
$var wire 32 < r6 [31:0] $end
$var wire 32 = r5 [31:0] $end
$var wire 32 > r4 [31:0] $end
$var wire 32 ? r32 [31:0] $end
$var wire 32 @ r31 [31:0] $end
$var wire 32 A r30 [31:0] $end
$var wire 32 B r3 [31:0] $end
$var wire 32 C r29 [31:0] $end
$var wire 32 D r28 [31:0] $end
$var wire 32 E r27 [31:0] $end
$var wire 32 F r26 [31:0] $end
$var wire 32 G r25 [31:0] $end
$var wire 32 H r24 [31:0] $end
$var wire 32 I r23 [31:0] $end
$var wire 32 J r22 [31:0] $end
$var wire 32 K r21 [31:0] $end
$var wire 32 L r20 [31:0] $end
$var wire 32 M r2 [31:0] $end
$var wire 32 N r19 [31:0] $end
$var wire 32 O r18 [31:0] $end
$var wire 32 P r17 [31:0] $end
$var wire 32 Q r16 [31:0] $end
$var wire 32 R r15 [31:0] $end
$var wire 32 S r14 [31:0] $end
$var wire 32 T r13 [31:0] $end
$var wire 32 U r12 [31:0] $end
$var wire 32 V r11 [31:0] $end
$var wire 32 W r10 [31:0] $end
$var wire 32 X r1 [31:0] $end
$var wire 1 Y predicted $end
$var wire 32 Z pcPlus4 [31:0] $end
$var wire 32 [ pcBranched [31:0] $end
$var wire 32 \ pcBranchOperand [31:0] $end
$var wire 1 ] nop $end
$var wire 1 ^ memtoReg_MEM_WB_out $end
$var wire 1 _ memtoReg_ID_EX_out $end
$var wire 1 ` memtoReg_EX_MEM_out $end
$var wire 1 a memtoReg $end
$var wire 1 b memWrite_ID_EX_out $end
$var wire 1 c memWrite_EX_MEM_out $end
$var wire 1 d memWrite $end
$var wire 32 e m8 [31:0] $end
$var wire 32 f m4 [31:0] $end
$var wire 32 g m36 [31:0] $end
$var wire 32 h m32 [31:0] $end
$var wire 32 i m28 [31:0] $end
$var wire 32 j m24 [31:0] $end
$var wire 32 k m20 [31:0] $end
$var wire 32 l m16 [31:0] $end
$var wire 32 m m12 [31:0] $end
$var wire 32 n m0 [31:0] $end
$var wire 1 o lh_MEM_WB_out $end
$var wire 1 p lh_ID_EX_out $end
$var wire 1 q lh_EX_MEM_out $end
$var wire 1 r lh $end
$var wire 1 s ld_ID_EX_out $end
$var wire 1 t ld_EX_MEM_out $end
$var wire 1 u ld $end
$var wire 1 v jalr $end
$var wire 32 w instruction_IF_ID_out [31:0] $end
$var wire 32 x instruction [31:0] $end
$var wire 32 y immediate_ID_EX_out [31:0] $end
$var wire 32 z immediate [31:0] $end
$var wire 1 { halt_MEM_WB_out $end
$var wire 1 | halt_ID_EX_out $end
$var wire 1 } halt_EX_MEM_out $end
$var wire 1 ~ halt $end
$var wire 32 !" forwardedOp2 [31:0] $end
$var wire 32 "" forwardedOp1 [31:0] $end
$var wire 2 #" forwardOp2 [1:0] $end
$var wire 2 $" forwardOp1 [1:0] $end
$var wire 32 %" data_MEM_WB_out [31:0] $end
$var wire 32 &" data [31:0] $end
$var wire 32 '" c9 [31:0] $end
$var wire 32 (" c8 [31:0] $end
$var wire 32 )" c7 [31:0] $end
$var wire 32 *" c6 [31:0] $end
$var wire 32 +" c5 [31:0] $end
$var wire 32 ," c4 [31:0] $end
$var wire 32 -" c3 [31:0] $end
$var wire 32 ." c2 [31:0] $end
$var wire 32 /" c15 [31:0] $end
$var wire 32 0" c14 [31:0] $end
$var wire 32 1" c13 [31:0] $end
$var wire 32 2" c12 [31:0] $end
$var wire 32 3" c11 [31:0] $end
$var wire 32 4" c10 [31:0] $end
$var wire 32 5" c1 [31:0] $end
$var wire 32 6" c0 [31:0] $end
$var wire 32 7" branchUnitOperand2 [31:0] $end
$var wire 32 8" branchUnitOperand1 [31:0] $end
$var wire 1 9" PCsrc $end
$var wire 32 :" PC_IF_ID_out [31:0] $end
$var wire 32 ;" PC_ID_EX_out [31:0] $end
$var wire 2 <" ID_forwardOp2 [1:0] $end
$var wire 2 =" ID_forwardOp1 [1:0] $end
$var wire 2 >" ALUsrc_ID_EX_out [1:0] $end
$var wire 2 ?" ALUsrc [1:0] $end
$var wire 32 @" ALUresult_MEM_WB_out [31:0] $end
$var wire 32 A" ALUresult_EX_MEM_out [31:0] $end
$var wire 32 B" ALUresult [31:0] $end
$var wire 4 C" ALUop_ID_EX_out [3:0] $end
$var wire 4 D" ALUop [3:0] $end
$var reg 1 E" clock $end
$var reg 1 F" reset $end
$var integer 32 G" cycles [31:0] $end
$scope module ALUDUT $end
$var wire 4 H" operation [3:0] $end
$var wire 32 I" operand2 [31:0] $end
$var wire 32 J" operand1 [31:0] $end
$var parameter 4 K" addop $end
$var parameter 4 L" andop $end
$var parameter 4 M" jalop $end
$var parameter 4 N" luiop $end
$var parameter 4 O" orop $end
$var parameter 4 P" sllop $end
$var parameter 4 Q" sltop $end
$var parameter 4 R" srlop $end
$var parameter 4 S" subop $end
$var parameter 4 T" xorop $end
$var reg 32 U" result [31:0] $end
$var reg 1 ! zeroFlag $end
$upscope $end
$scope module add4Adder $end
$var wire 32 V" operand2 [31:0] $end
$var wire 32 W" sum [31:0] $end
$var wire 32 X" operand1 [31:0] $end
$upscope $end
$scope module branchAdder $end
$var wire 32 Y" operand1 [31:0] $end
$var wire 32 Z" sum [31:0] $end
$var wire 32 [" operand2 [31:0] $end
$upscope $end
$scope module branchUnit $end
$var wire 1 E" clock $end
$var wire 3 \" funct3 [2:0] $end
$var wire 7 ]" opCode [6:0] $end
$var wire 1 F" reset $end
$var wire 32 ^" operand2 [31:0] $end
$var wire 32 _" operand1 [31:0] $end
$var wire 1 ] nop $end
$var parameter 7 `" bOp $end
$var parameter 3 a" beqf3 $end
$var parameter 3 b" bnef3 $end
$var parameter 7 c" jalOp $end
$var parameter 7 d" jalrOp $end
$var reg 1 9" PCsrc $end
$var reg 1 Y predicted $end
$var reg 2 e" state [1:0] $end
$upscope $end
$scope module branchUnitOp1Mux $end
$var wire 32 f" i3 [31:0] $end
$var wire 2 g" select [1:0] $end
$var wire 32 h" i2 [31:0] $end
$var wire 32 i" i1 [31:0] $end
$var wire 32 j" i0 [31:0] $end
$var reg 32 k" out [31:0] $end
$upscope $end
$scope module branchUnitOp2Mux $end
$var wire 32 l" i3 [31:0] $end
$var wire 2 m" select [1:0] $end
$var wire 32 n" i2 [31:0] $end
$var wire 32 o" i1 [31:0] $end
$var wire 32 p" i0 [31:0] $end
$var reg 32 q" out [31:0] $end
$upscope $end
$scope module bufferEX_MEM $end
$var wire 32 r" ALUresult_in [31:0] $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 1 ' sb_in $end
$var wire 1 - regWrite_in $end
$var wire 32 s" readData2_in [31:0] $end
$var wire 5 t" rd_in [4:0] $end
$var wire 1 _ memtoReg_in $end
$var wire 1 b memWrite_in $end
$var wire 1 p lh_in $end
$var wire 1 s ld_in $end
$var wire 1 | halt_in $end
$var reg 32 u" ALUresult [31:0] $end
$var reg 1 } halt $end
$var reg 1 t ld $end
$var reg 1 q lh $end
$var reg 1 c memWrite $end
$var reg 1 ` memtoReg $end
$var reg 5 v" rd [4:0] $end
$var reg 32 w" readData2 [31:0] $end
$var reg 1 . regWrite $end
$var reg 1 ( sb $end
$upscope $end
$scope module bufferID_EX $end
$var wire 1 E" clock $end
$var wire 5 x" rd_in [4:0] $end
$var wire 1 F" reset $end
$var wire 5 y" rs1_in [4:0] $end
$var wire 5 z" rs2_in [4:0] $end
$var wire 1 ) sb_in $end
$var wire 1 / regWrite_in $end
$var wire 32 {" readData2_in [31:0] $end
$var wire 32 |" readData1_in [31:0] $end
$var wire 1 ] nop $end
$var wire 1 a memtoReg_in $end
$var wire 1 d memWrite_in $end
$var wire 1 r lh_in $end
$var wire 1 u ld_in $end
$var wire 32 }" immediate_in [31:0] $end
$var wire 1 ~ halt_in $end
$var wire 32 ~" PC_in [31:0] $end
$var wire 2 !# ALUsrc_in [1:0] $end
$var wire 4 "# ALUop_in [3:0] $end
$var reg 4 ## ALUop [3:0] $end
$var reg 2 $# ALUsrc [1:0] $end
$var reg 32 %# PC [31:0] $end
$var reg 1 | halt $end
$var reg 32 &# immediate [31:0] $end
$var reg 1 s ld $end
$var reg 1 p lh $end
$var reg 1 b memWrite $end
$var reg 1 _ memtoReg $end
$var reg 5 '# rd [4:0] $end
$var reg 32 (# readData1 [31:0] $end
$var reg 32 )# readData2 [31:0] $end
$var reg 1 - regWrite $end
$var reg 5 *# rs1 [4:0] $end
$var reg 5 +# rs2 [4:0] $end
$var reg 1 ' sb $end
$upscope $end
$scope module bufferIF_ID $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 1 v jalr $end
$var wire 32 ,# instruction_in [31:0] $end
$var wire 32 -# PC_in [31:0] $end
$var reg 32 .# PC [31:0] $end
$var reg 32 /# instruction [31:0] $end
$upscope $end
$scope module bufferMEM_WB $end
$var wire 32 0# ALUresult_in [31:0] $end
$var wire 1 E" clock $end
$var wire 1 } halt_in $end
$var wire 1 q lh_in $end
$var wire 1 ` memtoReg_in $end
$var wire 5 1# rd_in [4:0] $end
$var wire 1 . regWrite_in $end
$var wire 1 F" reset $end
$var wire 32 2# data_in [31:0] $end
$var reg 32 3# ALUresult [31:0] $end
$var reg 32 4# data [31:0] $end
$var reg 1 { halt $end
$var reg 1 o lh $end
$var reg 1 ^ memtoReg $end
$var reg 5 5# rd [4:0] $end
$var reg 1 , regWrite $end
$upscope $end
$scope module controlUnit $end
$var wire 3 6# funct3 [2:0] $end
$var wire 7 7# funct7 [6:0] $end
$var wire 7 8# opCode [6:0] $end
$var wire 1 ] nop $end
$var wire 1 ~ halt $end
$var parameter 7 9# Rtype $end
$var parameter 7 :# addiwOp $end
$var parameter 3 ;# addiwf3 $end
$var parameter 4 <# addop $end
$var parameter 3 =# addwf3 $end
$var parameter 7 ># addwf7 $end
$var parameter 3 ?# andf3 $end
$var parameter 7 @# andf7 $end
$var parameter 7 A# andiOp $end
$var parameter 3 B# andif3 $end
$var parameter 4 C# andop $end
$var parameter 7 D# beqOp $end
$var parameter 3 E# beqf3 $end
$var parameter 7 F# bneOp $end
$var parameter 3 G# bnef3 $end
$var parameter 7 H# jalOp $end
$var parameter 4 I# jalop $end
$var parameter 7 J# jalrOp $end
$var parameter 3 K# jalrf3 $end
$var parameter 7 L# lhOp $end
$var parameter 3 M# lhf3 $end
$var parameter 7 N# luiOp $end
$var parameter 4 O# luiop $end
$var parameter 7 P# lwOp $end
$var parameter 3 Q# lwf3 $end
$var parameter 3 R# orf3 $end
$var parameter 7 S# orf7 $end
$var parameter 7 T# oriOp $end
$var parameter 3 U# orif3 $end
$var parameter 4 V# orop $end
$var parameter 7 W# sbOp $end
$var parameter 3 X# sbf3 $end
$var parameter 3 Y# sllf3 $end
$var parameter 7 Z# sllf7 $end
$var parameter 4 [# sllop $end
$var parameter 3 \# sltf3 $end
$var parameter 7 ]# sltf7 $end
$var parameter 4 ^# sltop $end
$var parameter 3 _# srlf3 $end
$var parameter 7 `# srlf7 $end
$var parameter 4 a# srlop $end
$var parameter 3 b# subf3 $end
$var parameter 7 c# subf7 $end
$var parameter 4 d# subop $end
$var parameter 7 e# swOp $end
$var parameter 3 f# swf3 $end
$var parameter 3 g# xorf3 $end
$var parameter 7 h# xorf7 $end
$var parameter 4 i# xorop $end
$var reg 4 j# ALUop [3:0] $end
$var reg 2 k# ALUsrc [1:0] $end
$var reg 1 v jalr $end
$var reg 1 u ld $end
$var reg 1 r lh $end
$var reg 1 d memWrite $end
$var reg 1 a memtoReg $end
$var reg 1 / regWrite $end
$var reg 1 ) sb $end
$upscope $end
$scope module dataCache $end
$var wire 32 l# address [31:0] $end
$var wire 32 m# c0 [31:0] $end
$var wire 32 n# c1 [31:0] $end
$var wire 32 o# c10 [31:0] $end
$var wire 32 p# c11 [31:0] $end
$var wire 32 q# c12 [31:0] $end
$var wire 32 r# c13 [31:0] $end
$var wire 32 s# c14 [31:0] $end
$var wire 32 t# c15 [31:0] $end
$var wire 32 u# c2 [31:0] $end
$var wire 32 v# c3 [31:0] $end
$var wire 32 w# c4 [31:0] $end
$var wire 32 x# c5 [31:0] $end
$var wire 32 y# c6 [31:0] $end
$var wire 32 z# c7 [31:0] $end
$var wire 32 {# c8 [31:0] $end
$var wire 32 |# c9 [31:0] $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 1 ( sb $end
$var wire 32 }# writeData [31:0] $end
$var wire 1 c writeEnable $end
$var wire 4 ~# word_offset [3:0] $end
$var wire 22 !$ tag [21:0] $end
$var wire 32 "$ m8 [31:0] $end
$var wire 32 #$ m4 [31:0] $end
$var wire 32 $$ m36 [31:0] $end
$var wire 32 %$ m32 [31:0] $end
$var wire 32 &$ m28 [31:0] $end
$var wire 32 '$ m24 [31:0] $end
$var wire 32 ($ m20 [31:0] $end
$var wire 32 )$ m16 [31:0] $end
$var wire 32 *$ m12 [31:0] $end
$var wire 32 +$ m0 [31:0] $end
$var wire 4 ,$ index [3:0] $end
$var wire 2 -$ byte_offset [1:0] $end
$var reg 32 .$ data [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 /$ i [31:0] $end
$upscope $end
$upscope $end
$scope module forwardALUOp1 $end
$var wire 32 0$ i0 [31:0] $end
$var wire 32 1$ i1 [31:0] $end
$var wire 32 2$ i3 [31:0] $end
$var wire 2 3$ select [1:0] $end
$var wire 32 4$ i2 [31:0] $end
$var reg 32 5$ out [31:0] $end
$upscope $end
$scope module forwardALUOp2 $end
$var wire 32 6$ i0 [31:0] $end
$var wire 32 7$ i1 [31:0] $end
$var wire 32 8$ i3 [31:0] $end
$var wire 2 9$ select [1:0] $end
$var wire 32 :$ i2 [31:0] $end
$var reg 32 ;$ out [31:0] $end
$upscope $end
$scope module fwUnit $end
$var wire 5 <$ EX_MEM_rd [4:0] $end
$var wire 5 =$ ID_EX_rd [4:0] $end
$var wire 5 >$ ID_EX_rs1 [4:0] $end
$var wire 5 ?$ ID_EX_rs2 [4:0] $end
$var wire 5 @$ IF_ID_rs1 [4:0] $end
$var wire 5 A$ IF_ID_rs2 [4:0] $end
$var wire 5 B$ MEM_WB_rd [4:0] $end
$var wire 2 C$ branch [1:0] $end
$var wire 1 E" clock $end
$var wire 1 D$ load_EX_MEM $end
$var wire 1 s load_ID_EX $end
$var wire 7 E$ opCode [6:0] $end
$var wire 1 . regWrite_EX_MEM $end
$var wire 1 - regWrite_ID_EX $end
$var wire 1 , regWrite_MEM_WB $end
$var wire 1 F" reset $end
$var parameter 7 F$ bOp $end
$var parameter 7 G$ jalrOp $end
$var reg 2 H$ ID_forwardOp1 [1:0] $end
$var reg 2 I$ ID_forwardOp2 [1:0] $end
$var reg 2 J$ forwardOp1 [1:0] $end
$var reg 2 K$ forwardOp2 [1:0] $end
$var reg 1 ] nop $end
$upscope $end
$scope module immediateGen $end
$var wire 32 L$ instruction [31:0] $end
$var parameter 7 M$ addiwOp $end
$var parameter 7 N$ andiOp $end
$var parameter 7 O$ beqOp $end
$var parameter 7 P$ bneOp $end
$var parameter 7 Q$ jalOp $end
$var parameter 7 R$ jalrOp $end
$var parameter 7 S$ lhOp $end
$var parameter 7 T$ luiOp $end
$var parameter 7 U$ lwOp $end
$var parameter 7 V$ oriOp $end
$var parameter 7 W$ sbOp $end
$var parameter 7 X$ swOp $end
$var reg 32 Y$ out [31:0] $end
$upscope $end
$scope module instMem $end
$var wire 1 E" clock $end
$var wire 1 F" reset $end
$var wire 4 Z$ word_offset [3:0] $end
$var wire 22 [$ tag [21:0] $end
$var wire 32 \$ instructionAddress [31:0] $end
$var wire 6 ]$ index [5:0] $end
$var wire 2 ^$ byte_offset [1:0] $end
$var reg 32 _$ instruction [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 `$ i [31:0] $end
$upscope $end
$upscope $end
$scope module memtoRegMux $end
$var wire 32 a$ i1 [31:0] $end
$var wire 1 ^ select $end
$var wire 32 b$ i0 [31:0] $end
$var reg 32 c$ out [31:0] $end
$upscope $end
$scope module pcBranchAdderMux $end
$var wire 32 d$ i0 [31:0] $end
$var wire 32 e$ i1 [31:0] $end
$var wire 1 v select $end
$var reg 32 f$ out [31:0] $end
$upscope $end
$scope module pcMux $end
$var wire 32 g$ i0 [31:0] $end
$var wire 32 h$ i1 [31:0] $end
$var wire 1 9" select $end
$var reg 32 i$ out [31:0] $end
$upscope $end
$scope module programCounter $end
$var wire 1 9" branch $end
$var wire 1 E" clock $end
$var wire 32 j$ immediate [31:0] $end
$var wire 32 k$ nextAddress [31:0] $end
$var wire 1 ] nop $end
$var wire 1 F" reset $end
$var reg 32 l$ readAddress [31:0] $end
$upscope $end
$scope module registerFile $end
$var wire 1 E" clock $end
$var wire 32 m$ r1 [31:0] $end
$var wire 32 n$ r10 [31:0] $end
$var wire 32 o$ r11 [31:0] $end
$var wire 32 p$ r12 [31:0] $end
$var wire 32 q$ r13 [31:0] $end
$var wire 32 r$ r14 [31:0] $end
$var wire 32 s$ r15 [31:0] $end
$var wire 32 t$ r16 [31:0] $end
$var wire 32 u$ r17 [31:0] $end
$var wire 32 v$ r18 [31:0] $end
$var wire 32 w$ r19 [31:0] $end
$var wire 32 x$ r2 [31:0] $end
$var wire 32 y$ r20 [31:0] $end
$var wire 32 z$ r21 [31:0] $end
$var wire 32 {$ r22 [31:0] $end
$var wire 32 |$ r23 [31:0] $end
$var wire 32 }$ r24 [31:0] $end
$var wire 32 ~$ r25 [31:0] $end
$var wire 32 !% r26 [31:0] $end
$var wire 32 "% r27 [31:0] $end
$var wire 32 #% r28 [31:0] $end
$var wire 32 $% r29 [31:0] $end
$var wire 32 %% r3 [31:0] $end
$var wire 32 &% r30 [31:0] $end
$var wire 32 '% r31 [31:0] $end
$var wire 32 (% r32 [31:0] $end
$var wire 32 )% r4 [31:0] $end
$var wire 32 *% r5 [31:0] $end
$var wire 32 +% r6 [31:0] $end
$var wire 32 ,% r7 [31:0] $end
$var wire 32 -% r8 [31:0] $end
$var wire 32 .% r9 [31:0] $end
$var wire 32 /% readData1 [31:0] $end
$var wire 32 0% readData2 [31:0] $end
$var wire 5 1% readReg1 [4:0] $end
$var wire 5 2% readReg2 [4:0] $end
$var wire 1 , regWrite $end
$var wire 1 F" reset $end
$var wire 32 3% writeData [31:0] $end
$var wire 5 4% writeReg [4:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 5% i [31:0] $end
$upscope $end
$upscope $end
$scope module selectALUOp2 $end
$var wire 32 6% i0 [31:0] $end
$var wire 32 7% i1 [31:0] $end
$var wire 32 8% i2 [31:0] $end
$var wire 32 9% i3 [31:0] $end
$var wire 2 :% select [1:0] $end
$var reg 32 ;% out [31:0] $end
$upscope $end
$scope module signExtenderDUT $end
$var wire 32 <% inputData [31:0] $end
$var wire 1 o lh $end
$var wire 32 =% outputData [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 X$
b100011 W$
b10011 V$
b11 U$
b111000 T$
b11 S$
b1100111 R$
b1101111 Q$
b1100011 P$
b1100011 O$
b11011 N$
b10011 M$
b1100111 G$
b1100011 F$
b111 i#
b0 h#
b11 g#
b10 f#
b100011 e#
b10 d#
b0 c#
b110 b#
b110 a#
b0 `#
b10 _#
b1000 ^#
b0 ]#
b0 \#
b101 [#
b0 Z#
b100 Y#
b0 X#
b100011 W#
b100 V#
b111 U#
b10011 T#
b0 S#
b101 R#
b0 Q#
b11 P#
b1010 O#
b111000 N#
b10 M#
b11 L#
b0 K#
b1100111 J#
b1001 I#
b1101111 H#
b1 G#
b1100011 F#
b0 E#
b1100011 D#
b11 C#
b110 B#
b11011 A#
b0 @#
b111 ?#
b100000 >#
b1 =#
b1 <#
b0 ;#
b10011 :#
b110011 9#
b1100111 d"
b1101111 c"
b1 b"
b0 a"
b1100011 `"
b111 T"
b10 S"
b110 R"
b1000 Q"
b101 P"
b100 O"
b1010 N"
b1001 M"
b11 L"
b1 K"
$end
#0
$dumpvars
bx =%
bx <%
bx ;%
bx :%
bz 9%
bx 8%
bx 7%
bx 6%
bx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
bx ,%
bx +%
bx *%
bx )%
bx (%
bx '%
bx &%
bx %%
bx $%
bx #%
bx "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
bx y$
bx x$
bx w$
bx v$
bx u$
bx t$
bx s$
bx r$
bx q$
bx p$
bx o$
bx n$
bx m$
bx l$
bx k$
bx j$
bx i$
bx h$
bx g$
bx f$
bx e$
bx d$
bx c$
bx b$
bx a$
bx `$
bx _$
bx ^$
bx ]$
bx \$
b0xxxxxxxxxxxxxxxxxxxx [$
bx Z$
bx Y$
bx L$
b0 K$
b0 J$
b0 I$
b0 H$
bx E$
zD$
bz C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
b0 9$
bz 8$
bx 7$
bx 6$
bx 5$
bx 4$
b0 3$
bz 2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
b0 +$
b0 *$
b0 )$
b0 ($
b0 '$
b0 &$
b0 %$
b0 $$
b1101110011000000101110101010 #$
b0 "$
bx !$
bx ~#
bx }#
bx |#
bx {#
bx z#
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bx p#
bx o#
bx n#
bx m#
bx l#
b0 k#
b0 j#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
b0 "#
b0 !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
b0 m"
bz l"
bx k"
bx j"
bx i"
bx h"
b0 g"
bz f"
bx e"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
b100 V"
bx U"
bx J"
bx I"
bx H"
b1 G"
0F"
0E"
b0 D"
bx C"
bx B"
bx A"
bx @"
b0 ?"
bx >"
b0 ="
b0 <"
bx ;"
bx :"
09"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
b0 $"
b0 #"
bx ""
bx !"
x~
x}
x|
x{
bx z
bx y
bx x
bx w
0v
0u
xt
xs
0r
xq
xp
xo
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b1101110011000000101110101010 f
b0 e
0d
xc
xb
0a
x`
x_
x^
0]
bx \
bx [
bx Z
0Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
0/
x.
x-
x,
bx +
bx *
0)
x(
x'
bx &
bx %
bx $
bx #
bx "
x!
$end
#1
b0 &
b0 I"
b0 ;%
b0 7"
b0 ^"
b0 q"
b0 8"
b0 _"
b0 k"
b0 e$
b0 "
b0 h"
b0 n"
b0 4$
b0 :$
b0 c$
b0 3%
b100 %
b100 i$
b100 k$
1!
b0 ""
b0 J"
b0 5$
b0 !"
b0 s"
b0 ;$
b0 6%
0~
b0 ^$
b0 Z$
b0 ]$
b0 [$
b0 z"
b0 y"
b0 x"
b0 A$
b0 @$
b0 E$
b0 \"
b0 ]"
b0 2
b0 p"
b0 {"
b0 0%
b0 2%
b0 4
b0 j"
b0 |"
b0 /%
b0 1%
b0 7#
b0 6#
b0 8#
b0 !$
b0 ,$
b0 ~#
b0 -$
b0 $
b0 b$
b0 =%
b11 #
b11 e"
b100 Z
b100 W"
b100 g$
b11111111111111111111111111111100 Y"
b0 5
b0 X"
b0 -#
b0 \$
b0 l$
b0 w
b0 /#
b0 L$
b0 :"
b0 ~"
b0 .#
0|
0s
b0 *
b0 +#
b0 ?$
b0 +
b0 *#
b0 >$
b0 7
b0 t"
b0 '#
b0 =$
b0 y
b0 &#
b0 7%
b0 0
b0 )#
b0 6$
b0 3
b0 (#
b0 0$
b0 ;"
b0 %#
b0 8%
b0 C"
b0 H"
b0 ##
b0 >"
b0 $#
b0 :%
0p
0'
0b
0_
0-
0}
b0 8
b0 v"
b0 1#
b0 <$
b0 A"
b0 i"
b0 o"
b0 u"
b0 0#
b0 l#
b0 1$
b0 7$
b0 1
b0 w"
b0 }#
0t
0q
0(
0c
0`
0.
0{
b0 6
b0 5#
b0 B$
b0 4%
b0 @"
b0 3#
b0 a$
b0 %"
b0 4#
b0 <%
0o
0^
0,
b0 ?
b0 (%
b0 @
b0 '%
b0 A
b0 &%
b0 C
b0 $%
b0 D
b0 #%
b0 E
b0 "%
b0 F
b0 !%
b0 G
b0 ~$
b0 H
b0 }$
b0 I
b0 |$
b0 J
b0 {$
b0 K
b0 z$
b0 L
b0 y$
b0 N
b0 w$
b0 O
b0 v$
b0 P
b0 u$
b0 Q
b0 t$
b0 R
b0 s$
b0 S
b0 r$
b0 T
b0 q$
b0 U
b0 p$
b0 V
b0 o$
b0 W
b0 n$
b0 9
b0 .%
b0 :
b0 -%
b0 ;
b0 ,%
b0 <
b0 +%
b0 =
b0 *%
b0 >
b0 )%
b0 B
b0 %%
b0 M
b0 x$
b0 X
b0 m$
b10000 /$
b1000000 `$
b100000 5%
1F"
#5
0F"
#10
b100 [
b100 Z"
b100 h$
b100 \
b100 ["
b100 f$
b1 ?"
b1 !#
b1 k#
b1 D"
b1 "#
b1 j#
1a
1/
b100 z
b100 }"
b100 Y$
b100 d$
b100 j$
b1000 %
b1000 i$
b1000 k$
bx !$
bx ,$
bx ~#
bx -$
b100 z"
b1 x"
b100 A$
b10011 E$
b10011 ]"
b100 2%
b10011 8#
b1 Z$
bx A"
bx i"
bx o"
bx u"
bx 0#
bx l#
bx 1$
bx 7$
bx y
bx &#
bx 7%
b10000000000000010010011 w
b10000000000000010010011 /#
b10000000000000010010011 L$
b1000 Z
b1000 W"
b1000 g$
b0 Y"
b100 5
b100 X"
b100 -#
b100 \$
b100 l$
b0 &"
b0 2#
b0 .$
b0 '"
b0 |#
b0 ("
b0 {#
b0 )"
b0 z#
b0 *"
b0 y#
b0 +"
b0 x#
b0 ,"
b0 w#
b0 -"
b0 v#
b0 ."
b0 u#
b1101110011000000101110101010 5"
b1101110011000000101110101010 n#
b0 6"
b0 m#
b10000000000000010010011 x
b10000000000000010010011 ,#
b10000000000000010010011 _$
b10 G"
1E"
#15
bx &"
bx 2#
bx .$
b101000000000000100010011 x
b101000000000000100010011 ,#
b101000000000000100010011 _$
0E"
#20
b1010 \
b1010 ["
b1010 f$
b1100 %
b1100 i$
b1100 k$
b1010 z
b1010 }"
b1010 Y$
b1010 d$
b1010 j$
b100 B"
b100 U"
b100 r"
0!
b100 &
b100 I"
b100 ;%
bx "
bx h"
bx n"
bx 4$
bx :$
bx c$
bx 3%
b10 Z$
b1010 z"
b10 x"
b1010 A$
b1010 2%
bx $
bx b$
bx =%
b1100 Z
b1100 W"
b1100 g$
b1110 [
b1110 Z"
b1110 h$
b100 Y"
b1000 5
b1000 X"
b1000 -#
b1000 \$
b1000 l$
b101000000000000100010011 w
b101000000000000100010011 /#
b101000000000000100010011 L$
b100 :"
b100 ~"
b100 .#
b100 *
b100 +#
b100 ?$
b1 7
b1 t"
b1 '#
b1 =$
b100 y
b100 &#
b100 7%
b1 C"
b1 H"
b1 ##
b1 >"
b1 $#
b1 :%
1_
1-
bx @"
bx 3#
bx a$
bx %"
bx 4#
bx <%
b11 G"
1E"
#25
b100100000000000110010011 x
b100100000000000110010011 ,#
b100100000000000110010011 _$
0E"
#30
b1010 B"
b1010 U"
b1010 r"
b1001 \
b1001 ["
b1001 f$
b1010 &
b1010 I"
b1010 ;%
b1001 z
b1001 }"
b1001 Y$
b1001 d$
b1001 j$
b10000 %
b10000 i$
b10000 k$
b0 !$
b0 ,$
b1 ~#
b0 -$
b1001 z"
b11 x"
b1001 A$
b1001 2%
b11 Z$
b1 8
b1 v"
b1 1#
b1 <$
b100 A"
b100 i"
b100 o"
b100 u"
b100 0#
b100 l#
b100 1$
b100 7$
1`
1.
b1010 *
b1010 +#
b1010 ?$
b10 7
b10 t"
b10 '#
b10 =$
b1010 y
b1010 &#
b1010 7%
b100 ;"
b100 %#
b100 8%
b100100000000000110010011 w
b100100000000000110010011 /#
b100100000000000110010011 L$
b1000 :"
b1000 ~"
b1000 .#
b10000 Z
b10000 W"
b10000 g$
b10001 [
b10001 Z"
b10001 h$
b1000 Y"
b1100 5
b1100 X"
b1100 -#
b1100 \$
b1100 l$
b100 G"
1E"
#35
b1101110011000000101110101010 &"
b1101110011000000101110101010 2#
b1101110011000000101110101010 .$
b1000001000001001100011 x
b1000001000001001100011 ,#
b1000001000001001100011 _$
0E"
#40
b1000 \
b1000 ["
b1000 f$
b1001 B"
b1001 U"
b1001 r"
b1010 7"
b1010 ^"
b1010 q"
b100 8"
b100 _"
b100 k"
b100 e$
b1 <"
b1 m"
b1 I$
b10 ="
b10 g"
b10 H$
09"
b10 D"
b10 "#
b10 j#
b0 ?"
b0 !#
b0 k#
0a
0/
b10100 %
b10100 i$
b10100 k$
b1000 z
b1000 }"
b1000 Y$
b1000 d$
b1000 j$
b1001 &
b1001 I"
b1001 ;%
b100 "
b100 h"
b100 n"
b100 4$
b100 :$
b100 c$
b100 3%
b100 4
b100 j"
b100 |"
b100 /%
b100 M
b100 x$
b100 Z$
b10 z"
b1 y"
b100 x"
b10 A$
b1 @$
b1100011 E$
b1100011 ]"
b10 2%
b1 1%
b1100011 8#
b10 ~#
b10 -$
b1101110011000000101110101010 $
b1101110011000000101110101010 b$
b1101110011000000101110101010 =%
b10100 Z
b10100 W"
b10100 g$
b10100 [
b10100 Z"
b10100 h$
b1100 Y"
b10000 5
b10000 X"
b10000 -#
b10000 \$
b10000 l$
b1000001000001001100011 w
b1000001000001001100011 /#
b1000001000001001100011 L$
b1100 :"
b1100 ~"
b1100 .#
b1001 *
b1001 +#
b1001 ?$
b11 7
b11 t"
b11 '#
b11 =$
b1001 y
b1001 &#
b1001 7%
b1000 ;"
b1000 %#
b1000 8%
b10 8
b10 v"
b10 1#
b10 <$
b1010 A"
b1010 i"
b1010 o"
b1010 u"
b1010 0#
b1010 l#
b1010 1$
b1010 7$
b1 6
b1 5#
b1 B$
b1 4%
b100 @"
b100 3#
b100 a$
b1101110011000000101110101010 %"
b1101110011000000101110101010 4#
b1101110011000000101110101010 <%
1^
1,
b101 G"
1E"
#45
b0 &"
b0 2#
b0 .$
b1100001000001001100011 x
b1100001000001001100011 ,#
b1100001000001001100011 _$
0E"
#50
b1010 !"
b1010 s"
b1010 ;$
b1010 6%
b1010 B
b1010 %%
b1010 "
b1010 h"
b1010 n"
b1010 4$
b1010 :$
b1010 c$
b1010 3%
b1001 7"
b1001 ^"
b1001 q"
b100 ""
b100 J"
b100 5$
b11111111111111111111111111111010 B"
b11111111111111111111111111111010 U"
b11111111111111111111111111111010 r"
b1010 &
b1010 I"
b1010 ;%
b10 #"
b10 9$
b10 K$
b1 <"
b1 m"
b1 I$
b0 ="
b0 g"
b0 H$
b11000 %
b11000 i$
b11000 k$
b0 $
b0 b$
b0 =%
b1 -$
b11 z"
b11 A$
b11 2%
b101 Z$
b10 6
b10 5#
b10 B$
b10 4%
b1010 @"
b1010 3#
b1010 a$
b0 %"
b0 4#
b0 <%
b11 8
b11 v"
b11 1#
b11 <$
b1001 A"
b1001 i"
b1001 o"
b1001 u"
b1001 0#
b1001 l#
b1001 1$
b1001 7$
b10 *
b10 +#
b10 ?$
b1 +
b1 *#
b1 >$
b100 7
b100 t"
b100 '#
b100 =$
b1000 y
b1000 &#
b1000 7%
b100 3
b100 (#
b100 0$
b1100 ;"
b1100 %#
b1100 8%
b10 C"
b10 H"
b10 ##
b0 >"
b0 $#
b0 :%
0_
0-
b1100001000001001100011 w
b1100001000001001100011 /#
b1100001000001001100011 L$
b10000 :"
b10000 ~"
b10000 .#
b11000 Z
b11000 W"
b11000 g$
b11000 [
b11000 Z"
b11000 h$
b10000 Y"
b10100 5
b10100 X"
b10100 -#
b10100 \$
b10100 l$
b10 #
b10 e"
1Y
b110 G"
1E"
#55
0Y
b1100010000001001100011 x
b1100010000001001100011 ,#
b1100010000001001100011 _$
0E"
#60
b11111111111111111111111111111011 B"
b11111111111111111111111111111011 U"
b11111111111111111111111111111011 r"
b1001 &
b1001 I"
b1001 ;%
b1001 !"
b1001 s"
b1001 ;$
b1001 6%
b1010 8"
b1010 _"
b1010 k"
b1010 e$
b11100 %
b11100 i$
b11100 k$
b1001 7"
b1001 ^"
b1001 q"
b10 <"
b10 m"
b10 I$
b10 #"
b10 9$
b10 K$
b1001 2
b1001 p"
b1001 {"
b1001 0%
b1001 >
b1001 )%
b1001 "
b1001 h"
b1001 n"
b1001 4$
b1001 :$
b1001 c$
b1001 3%
b110 Z$
b10 y"
b10 @$
b1010 4
b1010 j"
b1010 |"
b1010 /%
b10 1%
b1111111111111111111111 !$
b1111 ,$
b1110 ~#
b10 -$
b11100 Z
b11100 W"
b11100 g$
b11100 [
b11100 Z"
b11100 h$
b10100 Y"
b11000 5
b11000 X"
b11000 -#
b11000 \$
b11000 l$
b1100010000001001100011 w
b1100010000001001100011 /#
b1100010000001001100011 L$
b10100 :"
b10100 ~"
b10100 .#
b11 *
b11 +#
b11 ?$
b10000 ;"
b10000 %#
b10000 8%
b100 8
b100 v"
b100 1#
b100 <$
b11111111111111111111111111111010 A"
b11111111111111111111111111111010 i"
b11111111111111111111111111111010 o"
b11111111111111111111111111111010 u"
b11111111111111111111111111111010 0#
b11111111111111111111111111111010 l#
b11111111111111111111111111111010 1$
b11111111111111111111111111111010 7$
b1010 1
b1010 w"
b1010 }#
0`
0.
b11 6
b11 5#
b11 B$
b11 4%
b1001 @"
b1001 3#
b1001 a$
b1 #
b1 e"
1Y
b111 G"
1E"
#65
0Y
bx &"
bx 2#
bx .$
b1000001000001001100011 x
b1000001000001001100011 ,#
b1000001000001001100011 _$
0E"
#70
b1010 7"
b1010 ^"
b1010 q"
b1 B"
b1 U"
b1 r"
bx "
bx h"
bx n"
bx 4$
bx :$
bx c$
bx 3%
b100 8"
b100 _"
b100 k"
b100 e$
b0 <"
b0 m"
b0 I$
b0 #"
b0 9$
b0 K$
b1010 ""
b1010 J"
b1010 5$
b100000 %
b100000 i$
b100000 k$
bx $
bx b$
bx =%
b11 -$
b10 z"
b1 y"
b10 A$
b1 @$
b1010 2
b1010 p"
b1010 {"
b1010 0%
b10 2%
b100 4
b100 j"
b100 |"
b100 /%
b1 1%
b111 Z$
b100 6
b100 5#
b100 B$
b100 4%
b11111111111111111111111111111010 @"
b11111111111111111111111111111010 3#
b11111111111111111111111111111010 a$
bx %"
bx 4#
bx <%
0^
0,
b11111111111111111111111111111011 A"
b11111111111111111111111111111011 i"
b11111111111111111111111111111011 o"
b11111111111111111111111111111011 u"
b11111111111111111111111111111011 0#
b11111111111111111111111111111011 l#
b11111111111111111111111111111011 1$
b11111111111111111111111111111011 7$
b1001 1
b1001 w"
b1001 }#
b10 +
b10 *#
b10 >$
b1001 0
b1001 )#
b1001 6$
b1010 3
b1010 (#
b1010 0$
b10100 ;"
b10100 %#
b10100 8%
b1000001000001001100011 w
b1000001000001001100011 /#
b1000001000001001100011 L$
b11000 :"
b11000 ~"
b11000 .#
b100000 Z
b100000 W"
b100000 g$
b100000 [
b100000 Z"
b100000 h$
b11000 Y"
b11100 5
b11100 X"
b11100 -#
b11100 \$
b11100 l$
b0 #
b0 e"
b1000 G"
1E"
#75
b100000000001010010011 x
b100000000001010010011 ,#
b100000000001010010011 _$
0E"
#80
b1 \
b1 ["
b1 f$
b11111111111111111111111111111010 B"
b11111111111111111111111111111010 U"
b11111111111111111111111111111010 r"
b1010 &
b1010 I"
b1010 ;%
b100 7"
b100 ^"
b100 q"
b0 8"
b0 _"
b0 k"
b0 e$
b1 ?"
b1 !#
b1 k#
1a
1/
b1 D"
b1 "#
b1 j#
b100100 %
b100100 i$
b100100 k$
b1 z
b1 }"
b1 Y$
b1 d$
b1 j$
b100 ""
b100 J"
b100 5$
b1010 !"
b1010 s"
b1010 ;$
b1010 6%
b1000 Z$
b1 z"
b0 y"
b101 x"
b1 A$
b0 @$
b10011 E$
b10011 ]"
b100 2
b100 p"
b100 {"
b100 0%
b1 2%
b0 4
b0 j"
b0 |"
b0 /%
b0 1%
b10011 8#
b0 !$
b0 ,$
b0 ~#
b1 -$
b100100 Z
b100100 W"
b100100 g$
b11101 [
b11101 Z"
b11101 h$
b11100 Y"
b100000 5
b100000 X"
b100000 -#
b100000 \$
b100000 l$
b100000000001010010011 w
b100000000001010010011 /#
b100000000001010010011 L$
b11100 :"
b11100 ~"
b11100 .#
b10 *
b10 +#
b10 ?$
b1 +
b1 *#
b1 >$
b1010 0
b1010 )#
b1010 6$
b100 3
b100 (#
b100 0$
b11000 ;"
b11000 %#
b11000 8%
b1 A"
b1 i"
b1 o"
b1 u"
b1 0#
b1 l#
b1 1$
b1 7$
b11111111111111111111111111111011 @"
b11111111111111111111111111111011 3#
b11111111111111111111111111111011 a$
b1001 G"
1E"
#85
b0 &"
b0 2#
b0 .$
b11111111111111111111111111111111 x
b11111111111111111111111111111111 ,#
b11111111111111111111111111111111 _$
0E"
#90
b0 D"
b0 "#
b0 j#
b0 ?"
b0 !#
b0 k#
0a
0/
b0 "
b0 h"
b0 n"
b0 4$
b0 :$
b0 c$
b0 3%
b0 7"
b0 ^"
b0 q"
b100 !"
b100 s"
b100 ;$
b100 6%
b0 ""
b0 J"
b0 5$
b1 B"
b1 U"
b1 r"
b1 &
b1 I"
b1 ;%
b101000 %
b101000 i$
b101000 k$
1~
b0 $
b0 b$
b0 =%
b1111111111111111111111 !$
b1111 ,$
b1110 ~#
b10 -$
b11111 z"
b11111 y"
b11111 x"
b11111 A$
b11111 @$
b1111111 E$
b111 \"
b1111111 ]"
b0 2
b0 p"
b0 {"
b0 0%
b11111 2%
b11111 1%
b1111111 7#
b111 6#
b1111111 8#
b1001 Z$
b1 @"
b1 3#
b1 a$
b0 %"
b0 4#
b0 <%
b11111111111111111111111111111010 A"
b11111111111111111111111111111010 i"
b11111111111111111111111111111010 o"
b11111111111111111111111111111010 u"
b11111111111111111111111111111010 0#
b11111111111111111111111111111010 l#
b11111111111111111111111111111010 1$
b11111111111111111111111111111010 7$
b1010 1
b1010 w"
b1010 }#
b1 *
b1 +#
b1 ?$
b0 +
b0 *#
b0 >$
b101 7
b101 t"
b101 '#
b101 =$
b1 y
b1 &#
b1 7%
b100 0
b100 )#
b100 6$
b0 3
b0 (#
b0 0$
b11100 ;"
b11100 %#
b11100 8%
b1 C"
b1 H"
b1 ##
b1 >"
b1 $#
b1 :%
1_
1-
b11111111111111111111111111111111 w
b11111111111111111111111111111111 /#
b11111111111111111111111111111111 L$
b100000 :"
b100000 ~"
b100000 .#
b101000 Z
b101000 W"
b101000 g$
b100001 [
b100001 Z"
b100001 h$
b100000 Y"
b100100 5
b100100 X"
b100100 -#
b100100 \$
b100100 l$
b1010 G"
1E"
#95
bx &"
bx 2#
bx .$
bx x
bx ,#
bx _$
0E"
#100
1!
bx 7"
bx ^"
bx q"
bx 8"
bx _"
bx k"
bx e$
b101100 %
b101100 i$
b101100 k$
b0 &
b0 I"
b0 ;%
b0 !"
b0 s"
b0 ;$
b0 6%
bx "
bx h"
bx n"
bx 4$
bx :$
bx c$
bx 3%
x~
b1010 Z$
bx z"
bx y"
bx x"
bx A$
bx @$
bx E$
bx \"
bx ]"
bx 2
bx p"
bx {"
bx 0%
bx 2%
bx 4
bx j"
bx |"
bx /%
bx 1%
bx 7#
bx 6#
bx 8#
b0 !$
b0 ,$
b0 ~#
b1 -$
bx $
bx b$
bx =%
b101100 Z
b101100 W"
b101100 g$
b100101 [
b100101 Z"
b100101 h$
b100100 Y"
b101000 5
b101000 X"
b101000 -#
b101000 \$
b101000 l$
bx w
bx /#
bx L$
b100100 :"
b100100 ~"
b100100 .#
1|
b11111 *
b11111 +#
b11111 ?$
b11111 +
b11111 *#
b11111 >$
b11111 7
b11111 t"
b11111 '#
b11111 =$
b0 0
b0 )#
b0 6$
b100000 ;"
b100000 %#
b100000 8%
b0 C"
b0 H"
b0 ##
b0 >"
b0 $#
b0 :%
0_
0-
b101 8
b101 v"
b101 1#
b101 <$
b1 A"
b1 i"
b1 o"
b1 u"
b1 0#
b1 l#
b1 1$
b1 7$
b100 1
b100 w"
b100 }#
1`
1.
b11111111111111111111111111111010 @"
b11111111111111111111111111111010 3#
b11111111111111111111111111111010 a$
bx %"
bx 4#
bx <%
b1011 G"
1E"
#105
b0 &"
b0 2#
b0 .$
0E"
#110
bx &
bx I"
bx ;%
x!
b1 "
b1 h"
b1 n"
b1 4$
b1 :$
b1 c$
b1 3%
b1 <
b1 +%
bx !"
bx s"
bx ;$
bx 6%
bx ""
bx J"
bx 5$
b110000 %
b110000 i$
b110000 k$
b0 $
b0 b$
b0 =%
b1011 Z$
b101 6
b101 5#
b101 B$
b101 4%
b1 @"
b1 3#
b1 a$
b0 %"
b0 4#
b0 <%
1^
1,
1}
b11111 8
b11111 v"
b11111 1#
b11111 <$
b0 1
b0 w"
b0 }#
0`
0.
x|
bx *
bx +#
bx ?$
bx +
bx *#
bx >$
bx 7
bx t"
bx '#
bx =$
bx 0
bx )#
bx 6$
bx 3
bx (#
bx 0$
b100100 ;"
b100100 %#
b100100 8%
b101000 :"
b101000 ~"
b101000 .#
b110000 Z
b110000 W"
b110000 g$
b101001 [
b101001 Z"
b101001 h$
b101000 Y"
b101100 5
b101100 X"
b101100 -#
b101100 \$
b101100 l$
b1100 G"
1E"
#115
0E"
#120
b110100 %
b110100 i$
b110100 k$
b0 "
b0 h"
b0 n"
b0 4$
b0 :$
b0 c$
b0 3%
b1100 Z$
b110100 Z
b110100 W"
b110100 g$
b101101 [
b101101 Z"
b101101 h$
b101100 Y"
b110000 5
b110000 X"
b110000 -#
b110000 \$
b110000 l$
b101100 :"
b101100 ~"
b101100 .#
b101000 ;"
b101000 %#
b101000 8%
x}
bx 8
bx v"
bx 1#
bx <$
bx 1
bx w"
bx }#
1{
b11111 6
b11111 5#
b11111 B$
b11111 4%
0^
0,
b1101 G"
1E"
#125
0E"
#130
b111000 %
b111000 i$
b111000 k$
b1101 Z$
x{
bx 6
bx 5#
bx B$
bx 4%
b101100 ;"
b101100 %#
b101100 8%
b110000 :"
b110000 ~"
b110000 .#
b111000 Z
b111000 W"
b111000 g$
b110001 [
b110001 Z"
b110001 h$
b110000 Y"
b110100 5
b110100 X"
b110100 -#
b110100 \$
b110100 l$
1E"
